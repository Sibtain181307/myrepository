{"version":3,"sources":["app/views/sessions/SignupShipper.jsx"],"names":["SignupShipper","state","email","username","password","repassword","handleSubmit","values","setSubmitting","console","log","className","style","backgroundImage","backgroundSize","src","alt","to","initialValues","this","validationSchema","SignupSchema","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","htmlFor","name","type","onChange","onBlur","value","Component","yup","shape","required","min","oneOf","connect","user"],"mappings":"uNAOMA,E,4MACJC,MAAQ,CACNC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,WAAY,I,EAGdC,aAAe,SAACC,EAAD,GAA+B,EAApBC,cACxBC,QAAQC,IAAIH,I,4CAGd,WACE,OACE,yBACEI,UAAU,mBACVC,MAAO,CACLC,gBAAiB,yCAGnB,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OACb,yBACEA,UAAU,wBACVC,MAAO,CACLE,eAAgB,QAChBD,gBAAiB,yCAGnB,yBAAKF,UAAU,mBACb,yBAAKA,UAAU,8BACb,yBAAKI,IAAI,2BAA2BC,IAAI,UAE1C,yBAAKL,UAAU,gBAEf,yBAAKA,UAAU,cACb,kBAAC,IAAD,CACEM,GAAG,kBACHN,UAAU,kFAEV,uBAAGA,UAAU,wBAJf,uBAOA,kBAAC,IAAD,CAAQA,UAAU,+DAChB,uBAAGA,UAAU,kBADf,wBAGA,kBAAC,IAAD,CAAQA,UAAU,iEAChB,uBAAGA,UAAU,iBADf,2BAIF,yBAAKA,UAAU,kBAInB,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,gBAAd,mBACA,kBAAC,IAAD,CACEO,cAAeC,KAAKlB,MACpBmB,iBAAkBC,EAClBC,SAAUH,KAAKb,eAEd,gBACCC,EADD,EACCA,OACAgB,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACApB,EAND,EAMCA,aAND,EAOCqB,aAPD,OASC,0BAAML,SAAUhB,GACd,yBAAKK,UAAU,cACb,2BAAOiB,QAAQ,YAAf,aACA,2BACEjB,UAAU,oCACVkB,KAAK,WACLC,KAAK,OACLC,SAAUN,EACVO,OAAQN,EACRO,MAAO1B,EAAOJ,WAEfoB,EAAOpB,UAAYqB,EAAQrB,UAC1B,yBAAKQ,UAAU,yBACZY,EAAOpB,WAId,yBAAKQ,UAAU,cACb,2BAAOiB,QAAQ,SAAf,iBACA,2BACEC,KAAK,QACLlB,UAAU,oCACVmB,KAAK,QACLC,SAAUN,EACVO,OAAQN,EACRO,MAAO1B,EAAOL,QAEfqB,EAAOrB,OAASsB,EAAQtB,OACvB,yBAAKS,UAAU,yBACZY,EAAOrB,QAId,yBAAKS,UAAU,cACb,2BAAOiB,QAAQ,YAAf,YACA,2BACEC,KAAK,WACLlB,UAAU,oCACVmB,KAAK,WACLC,SAAUN,EACVO,OAAQN,EACRO,MAAO1B,EAAOH,WAEfmB,EAAOnB,UAAYoB,EAAQpB,UAC1B,yBAAKO,UAAU,yBACZY,EAAOnB,WAId,yBAAKO,UAAU,cACb,2BAAOiB,QAAQ,cAAf,mBACA,2BACEC,KAAK,aACLlB,UAAU,oCACVmB,KAAK,WACLC,SAAUN,EACVO,OAAQN,EACRO,MAAO1B,EAAOF,aAEfkB,EAAOlB,YAAcmB,EAAQnB,YAC5B,yBAAKM,UAAU,yBACZY,EAAOlB,aAId,4BACEM,UAAU,8CACVmB,KAAK,UAFP,yB,GAzIII,aA4JtBb,EAAec,WAAaC,MAAM,CACtCjC,SAAUgC,WAAaE,SAAS,qBAChCnC,MAAOiC,WAAajC,MAAM,iBAAiBmC,SAAS,qBACpDjC,SAAU+B,WAEPG,IAAI,EAAG,qCACPD,SAAS,wBACZhC,WAAY8B,WAETE,SAAS,mBACTE,MAAM,CAACJ,MAAQ,aAAc,0BAOnBK,uBAJS,SAACvC,GAAD,MAAY,CAClCwC,KAAMxC,EAAMwC,QAG0B,GAAzBD,CAA6BxC","file":"static/js/163.18372002.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass SignupShipper extends Component {\r\n  state = {\r\n    email: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n    repassword: \"\",\r\n  };\r\n\r\n  handleSubmit = (values, { setSubmitting }) => {\r\n    console.log(values);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"auth-layout-wrap\"\r\n        style={{\r\n          backgroundImage: \"url(/assets/images/photo-wide-4.jpg)\",\r\n        }}\r\n      >\r\n        <div className=\"auth-content\">\r\n          <div className=\"card o-hidden\">\r\n            <div className=\"row\">\r\n              <div\r\n                className=\"col-md-6 text-center \"\r\n                style={{\r\n                  backgroundSize: \"cover\",\r\n                  backgroundImage: \"url(/assets/images/photo-long-3.jpg)\",\r\n                }}\r\n              >\r\n                <div className=\"ps-3 auth-right\">\r\n                  <div className=\"auth-logo text-center mt-4\">\r\n                    <img src=\"/assets/images/logo.png \" alt=\"Logo\" />\r\n                  </div>\r\n                  <div className=\"flex-grow-1\"></div>\r\n                  \r\n                  <div className=\"w-100 mb-4\">\r\n                    <Link\r\n                      to=\"/session/signin\"\r\n                      className=\"btn btn-rounded btn-outline-primary btn-outline-email w-100 my-1 btn-icon-text\"\r\n                    >\r\n                      <i className=\"i-Mail-with-At-Sign\"></i> Sign in with Email\r\n                    </Link>\r\n\r\n                    <Button className=\"btn btn-outline-google w-100 my-1 btn-icon-text btn-rounded\">\r\n                      <i className=\"i-Google-Plus\"></i> Sign in with Google\r\n                    </Button>\r\n                    <Button className=\"btn btn-outline-facebook w-100 my-1 btn-icon-text btn-rounded\">\r\n                      <i className=\"i-Facebook-2\"></i> Sign in with Facebook\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"flex-grow-1\"></div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-md-6\">\r\n                <div className=\"p-4\">\r\n                  <h1 className=\"mb-3 text-18\">Sign Up Shipper</h1>\r\n                  <Formik\r\n                    initialValues={this.state}\r\n                    validationSchema={SignupSchema}\r\n                    onSubmit={this.handleSubmit}\r\n                  >\r\n                    {({\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit,\r\n                      isSubmitting,\r\n                    }) => (\r\n                      <form onSubmit={handleSubmit}>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"username\">Your name</label>\r\n                          <input\r\n                            className=\"form-control form-control-rounded\"\r\n                            name=\"username\"\r\n                            type=\"text\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.username}\r\n                          />\r\n                          {errors.username && touched.username && (\r\n                            <div className=\"text-danger mt-1 ml-2\">\r\n                              {errors.username}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"email\">Email address</label>\r\n                          <input\r\n                            name=\"email\"\r\n                            className=\"form-control form-control-rounded\"\r\n                            type=\"email\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.email}\r\n                          />\r\n                          {errors.email && touched.email && (\r\n                            <div className=\"text-danger mt-1 ml-2\">\r\n                              {errors.email}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"password\">Password</label>\r\n                          <input\r\n                            name=\"password\"\r\n                            className=\"form-control form-control-rounded\"\r\n                            type=\"password\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.password}\r\n                          />\r\n                          {errors.password && touched.password && (\r\n                            <div className=\"text-danger mt-1 ml-2\">\r\n                              {errors.password}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"repassword\">Retype password</label>\r\n                          <input\r\n                            name=\"repassword\"\r\n                            className=\"form-control form-control-rounded\"\r\n                            type=\"password\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.repassword}\r\n                          />\r\n                          {errors.repassword && touched.repassword && (\r\n                            <div className=\"text-danger mt-1 ml-2\">\r\n                              {errors.repassword}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <button\r\n                          className=\"btn btn-primary w-100 my-1 btn-rounded mt-3\"\r\n                          type=\"submit\"\r\n                        >\r\n                          Sign Up\r\n                        </button>\r\n                      </form>\r\n                    )}\r\n                  </Formik>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst SignupSchema = yup.object().shape({\r\n  username: yup.string().required(\"email is required\"),\r\n  email: yup.string().email(\"Invalid email\").required(\"email is required\"),\r\n  password: yup\r\n    .string()\r\n    .min(8, \"Password must be 8 character long\")\r\n    .required(\"password is required\"),\r\n  repassword: yup\r\n    .string()\r\n    .required(\"repeat password\")\r\n    .oneOf([yup.ref(\"password\")], \"Passwords must match\"),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(SignupShipper);\r\n"],"sourceRoot":""}