{"version":3,"sources":["../node_modules/@restart/ui/esm/DropdownItem.js","../packages/@react-aria/ssr/src/SSRProvider.tsx","../node_modules/@restart/hooks/esm/useIsomorphicEffect.js","../node_modules/react-bootstrap/esm/DropdownMenu.js","../node_modules/react-bootstrap/esm/DropdownToggle.js","../node_modules/@restart/ui/esm/Dropdown.js","../node_modules/react-bootstrap/esm/Dropdown.js","../node_modules/@restart/ui/esm/SelectableContext.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/usePrevious.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventListener.js","../node_modules/@restart/ui/esm/DataKey.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useGlobalListener.js","../node_modules/react-bootstrap/esm/NavbarContext.js","../node_modules/@restart/hooks/esm/useCommittedRef.js","../node_modules/@restart/hooks/esm/useEventCallback.js","../node_modules/dom-helpers/esm/querySelectorAll.js","../node_modules/react-bootstrap/esm/DropdownItem.js","../node_modules/@restart/ui/esm/NavContext.js","../node_modules/@restart/ui/esm/DropdownContext.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useIsomorphicEffect.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useForceUpdate.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useResizeObserver.js","../node_modules/@restart/ui/esm/Anchor.js","../node_modules/react-bootstrap/esm/DropdownContext.js","../node_modules/@restart/ui/esm/DropdownMenu.js","../node_modules/react-bootstrap/esm/useWrappedRefWithWarning.js","../node_modules/@restart/ui/esm/DropdownToggle.js"],"names":["_excluded","useDropdownItem","key","href","active","disabled","onClick","onSelectCtx","useContext","SelectableContext","activeKey","NavContext","eventKey","makeEventKey","isActive","handleClick","useEventCallback","event","isPropagationStopped","undefined","dataAttr","DropdownItem","React","_ref","ref","as","Component","Button","props","source","excluded","i","target","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","dropdownItemProps","_jsx","assign","displayName","defaultContext","prefix","String","Math","current","SSRContext","canUseDOM","Boolean","window","useSSRSafeId","defaultId","ctx","console","useMemo","isReactNative","global","navigator","product","isDOM","document","useLayoutEffect","useEffect","getDropdownMenuPlacement","alignEnd","dropDirection","isRTL","placement","DropdownMenu","bsPrefix","className","align","rootCloseEvent","flip","showProps","show","renderOnMount","popperConfig","variant","isNavbar","NavbarContext","useBootstrapPrefix","DropdownContext","contextAlign","drop","isInputGroup","InputGroupContext","alignClasses","brkPoint","direction","push","useDropdownMenu","usePopper","offset","menuProps","hasShown","popper","toggle","useMergedRefs","useWrappedRefWithWarning","useIsomorphicEffect","update","close","style","classNames","defaultProps","DropdownToggle","split","childBsPrefix","dropdownContext","useDropdownToggle","toggleProps","useRefWithUpdate","forceUpdate","useForceUpdate","useRef","attachRef","useCallback","element","Dropdown","defaultShow","rawShow","onSelect","rawOnToggle","onToggle","itemSelector","focusFirstItemOnShow","children","useUncontrolledProp","menuRef","setMenu","menuElement","toggleRef","setToggle","toggleElement","lastShow","usePrevious","lastSourceEvent","focusInDropdown","nextShow","type","originalEvent","handleSelect","context","contains","activeElement","focusToggle","focus","maybeFocusFirst","focusType","isRoleMenu","test","first","qsa","getNextFocusedChild","items","index","max","min","useGlobalListener","_menuRef$current","_toggleRef$current","fromMenu","fromToggle","tagName","meta","next","preventDefault","addEventListener","e","_menuRef$current2","once","stopPropagation","Provider","value","Menu","Toggle","Item","DropdownHeader","createWithBsPrefix","role","DropdownDivider","DropdownItemText","pProps","useUncontrolled","autoClose","navbar","useIsRTL","handleToggle","currentTarget","contextValue","BaseDropdown","ItemText","Divider","Header","useEventListener","eventTarget","listener","capture","handler","removeEventListener","property","dataProp","documentTarget","useCommittedRef","fn","apply","arguments","toArray","Function","prototype","bind","call","slice","selector","querySelectorAll","Anchor","useReducer","state","WeakMap","onKeyDown","useButtonProps","buttonProps","handleKeyDown","trim","noop","options","useCallbackRef","arrowElement","attachArrowRef","hasShownRef","fixed","placementOverride","enableEventListeners","shouldUsePopper","handleClose","mergeOptionsWithPopperConfig","enabled","enableEvents","id","attributes","styles","metadata","arrowProps","arrow","useRootClose","clickTrigger","_Fragment","componentName","el","_el$getAttribute","getAttribute","toLowerCase"],"mappings":"gOAAMA,EAAY,CAAC,WAAY,WAAY,UAAW,SAAU,MAiBzD,SAASC,EAAT,GAMJ,IALDC,EAKC,EALDA,IACAC,EAIC,EAJDA,KACAC,EAGC,EAHDA,OACAC,EAEC,EAFDA,SACAC,EACC,EADDA,QAEMC,EAAcC,qBAAWC,KAG7BC,GAFiBF,qBAAWG,MAGZ,IADhBD,UAEIE,EAAWC,YAAaX,EAAKC,GAC7BW,EAAqB,MAAVV,GAAyB,MAAPF,EAAcW,YAAaH,KAAeE,EAAWR,EAClFW,EAAcC,aAAiB,SAAAC,GAC/BZ,IACO,MAAXC,GAA2BA,EAAQW,GAE/BV,IAAgBU,EAAMC,wBACxBX,EAAYK,EAAUK,OAG1B,MAAO,CAAC,aACNX,QAASS,EACT,gBAAiBV,QAAYc,EAC7B,gBAAiBL,GAChBM,YAAS,iBAAmB,IAC5B,CACDN,aAGJ,IAAMO,EAA4BC,cAAiB,SAACC,EAAMC,GACxD,IACEZ,EAKEW,EALFX,SACAP,EAIEkB,EAJFlB,SACAC,EAGEiB,EAHFjB,QACAF,EAEEmB,EAFFnB,OAJF,EAMImB,EADFE,GAAIC,OALN,MAKkBC,IALlB,EAOIC,EAtDN,SAAuCC,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,GAAI,IAA2D3B,EAAK6B,EAA5DC,EAAS,GAAQC,EAAaC,OAAOC,KAAKN,GAAqB,IAAKE,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IAAO7B,EAAM+B,EAAWF,GAAQD,EAASO,QAAQnC,IAAQ,IAAa8B,EAAO9B,GAAO2B,EAAO3B,IAAQ,OAAO8B,EAsD5RM,CAA8Bf,EAAMvB,GAEhD,EAA4BC,EAAgB,CAC1CC,IAAKU,EACLT,KAAMyB,EAAMzB,KACZE,WACAC,UACAF,WALKmC,EAAP,oBAOA,OAAoBC,cAAKd,EAAWQ,OAAOO,OAAO,GAAIb,EAAO,CAC3DJ,IAAKA,GACJe,OAELlB,EAAaqB,YAAc,eACZrB,O,8FCxCTsB,EAAkC,CACtCC,OAAQC,OAAOC,WADuB,KACZA,gBAC1BC,QAAS,GAGLC,EAAa1B,kBAAnB,GA2BA,IAAI2B,EAAYC,QACI,qBAAXC,QACPA,OADA,UAEAA,gBAHF,eAOO,SAASC,EAAaC,GAC3B,IAAIC,EAAM9C,qBAD6C,GASvD,OAJI8C,OAAJ,GACEC,gKAGKC,mBAAQ,kBAAMH,GAAa,aAAaC,EAAjB,cAAiCA,EAAjD,UAAgE,CAA9E,M,mCC9EF,uBACIG,EAAkC,qBAAXC,GAC3BA,EAAOC,WACsB,gBAA7BD,EAAOC,UAAUC,QACbC,EAA4B,qBAAbC,SAUJD,OAASJ,EAAgBM,kBAAkBC,c,8UCGnD,SAASC,EAAyBC,EAAUC,EAAeC,GAChE,IAQIC,EAAYH,EALEE,EAAQ,eAAiB,aADvBA,EAAQ,aAAe,eAQ3C,MADsB,OAAlBD,EAAwBE,EAAYH,EARzBE,EAAQ,YAAc,UADpBA,EAAQ,UAAY,YAS2D,QAAlBD,EAAyBE,EAAYH,EAFlGE,EAAQ,WAAa,YADnBA,EAAQ,aAAe,cAGqI,UAAlBD,IAA2BE,EAAYH,EAJpLE,EAAQ,YAAc,WADpBA,EAAQ,cAAgB,cAMnCC,EAET,IAAMC,EAA4BhD,cAAiB,WAahDE,GAAQ,IAZT+C,EAYS,EAZTA,SACAC,EAWS,EAXTA,UACAC,EAUS,EAVTA,MACAC,EASS,EATTA,eACAC,EAQS,EARTA,KACMC,EAOG,EAPTC,KACAC,EAMS,EANTA,cAMS,IAJTrD,GAAIC,OAIK,MAJO,MAIP,EAHTqD,EAGS,EAHTA,aACAC,EAES,EAFTA,QACGpD,EACM,iBACLsC,GAAW,EACTe,EAAWzE,qBAAW0E,KACtBtC,EAASuC,YAAmBZ,EAAU,iBAC5C,EAII/D,qBAAW4E,KAHNC,EADT,EACEZ,MACAa,EAFF,EAEEA,KACAlB,EAHF,EAGEA,MAEFK,EAAQA,GAASY,EACjB,IAAME,EAAe/E,qBAAWgF,KAC1BC,EAAe,GAErB,GAAIhB,EACF,GAAqB,kBAAVA,EAAoB,CAC7B,IAAMtC,EAAOD,OAAOC,KAAKsC,GAGzB,GAAItC,EAAKC,OAAQ,CACf,IAAMsD,EAAWvD,EAAK,GAChBwD,EAAYlB,EAAMiB,GAGxBxB,EAAyB,UAAdyB,EACXF,EAAaG,KAAb,UAAqBhD,EAArB,YAA+B8C,EAA/B,YAA2CC,SAE1B,QAAVlB,IACTP,GAAW,GAIf,IAAMG,EAAYJ,EAAyBC,EAAUoB,EAAMlB,GAC3D,EAKKyB,YAAgB,CACnBlB,OACAD,iBACAG,KAAMD,EACNkB,WAAYb,GAAoC,IAAxBQ,EAAarD,OACrC2D,OAAQ,CAAC,EAAG,GACZhB,eACAV,cAZF,mBAAO2B,EAAP,YACEC,EADF,EACEA,SACAC,EAFF,EAEEA,OACArB,EAHF,EAGEA,KACAsB,EAJF,EAIEA,OAgBF,GANAH,EAAUxE,IAAM4E,YAAcC,YAAyB7E,EAAK,gBAAiBwE,EAAUxE,KACvF8E,aAAoB,WAGdzB,IAAgB,MAAVqB,GAA0BA,EAAOK,YAC1C,CAAC1B,KACCoB,IAAanB,IAAkBS,EAAc,OAAO,KAEhC,kBAAd7D,IACTsE,EAAUnB,KAAOA,EAEjBmB,EAAUQ,MAAQ,kBAAgB,MAAVL,OAAiB,EAASA,GAAO,IAEzDH,EAAUvB,MAAQA,GAGpB,IAAIgC,EAAQ7E,EAAM6E,MAWlB,OATc,MAAVP,GAAkBA,EAAO7B,YAG3BoC,EAAQ,2BAAK7E,EAAM6E,OACdT,EAAUS,OAEf7E,EAAM,eAAiBsE,EAAO7B,WAGZ7B,cAAKd,EAAD,YAAC,uCAAgBE,GACpCoE,GADmB,IAEtBS,MAAOA,IAEFhB,EAAarD,QAAU6C,IAAa,CACvC,iBAAkB,WALE,IAOtBT,UAAWkC,IAAU,WAAV,GAAWlC,EAAW5B,EAAQiC,GAAQ,OAAQX,GAAY,GAAJ,OAAOtB,EAAP,QAAqBoC,GAAW,GAAJ,OAAOpC,EAAP,YAAiBoC,IAAnG,OAAiHS,UAGhInB,EAAa5B,YAAc,eAC3B4B,EAAaqC,aAjHQ,CACnBhC,MAAM,GAiHOL,O,gNCrHTsC,EAA8BtF,cAAiB,WAQlDE,GAAQ,IAPT+C,EAOS,EAPTA,SACAsC,EAMS,EANTA,MACArC,EAKS,EALTA,UACAsC,EAIS,EAJTA,cAIS,IAFTrF,GAAIC,OAEK,MAFOC,IAEP,EADNC,EACM,iBACHgB,EAASuC,YAAmBZ,EAAU,mBACtCwC,EAAkBvG,qBAAW4E,KAC7BG,EAAe/E,qBAAWgF,UAEVrE,IAAlB2F,IACFlF,EAAM2C,SAAWuC,GAGnB,MAAsBE,cAAfC,EAAP,oBAIA,OAHAA,EAAYzF,IAAM4E,YAAca,EAAYzF,IAAK6E,YAAyB7E,EAAK,mBAG3DgB,cAAKd,EAAD,YAAC,aACvB8C,UAAWkC,IAAWlC,EAAW5B,EAAQiE,GAAS,GAAJ,OAAOjE,EAAP,YAAyB2C,IAAoC,MAAnBwB,OAA0B,EAASA,EAAgBlC,OAAS,SACjJoC,GACArF,OAGPgF,EAAelE,YAAc,iBACdkE,O,+MCtBf,SAASM,IACP,IAAMC,EAAcC,cACd5F,EAAM6F,iBAAO,MACbC,EAAYC,uBAAY,SAAAC,GAC5BhG,EAAIuB,QAAUyE,EAEdL,MACC,CAACA,IACJ,MAAO,CAAC3F,EAAK8F,GAQf,SAASG,EAAT,GASG,IARDC,EAQC,EARDA,YACMC,EAOL,EAPD9C,KACA+C,EAMC,EANDA,SACUC,EAKT,EALDC,SAKC,IAJDC,oBAIC,mBAJoB3G,YAAS,iBAI7B,OAHD4G,EAGC,EAHDA,qBAGC,IAFD3D,iBAEC,MAFW,eAEX,EADD4D,EACC,EADDA,SAEA,EAAyBC,YAAoBP,EAASD,EAAaG,GAAnE,mBAAOhD,EAAP,KAAaiD,EAAb,KAIA,EAA2BZ,IAA3B,mBAAOiB,EAAP,KAAgBC,EAAhB,KACMC,EAAcF,EAAQpF,QAC5B,EAA+BmE,IAA/B,mBAAOoB,EAAP,KAAkBC,EAAlB,KACMC,EAAgBF,EAAUvF,QAC1B0F,EAAWC,YAAY7D,GACvB8D,EAAkBtB,iBAAO,MACzBuB,EAAkBvB,kBAAO,GACzB9G,EAAcC,qBAAWC,KACzB0F,EAASoB,uBAAY,SAACsB,EAAU5H,GAAwD,IAAjDY,EAAiD,uDAA/B,MAATZ,OAAgB,EAASA,EAAM6H,KACnFhB,EAASe,EAAU,CACjBE,cAAe9H,EACfY,aAED,CAACiG,IACEkB,EAAehI,aAAiB,SAACd,EAAKe,GAC9B,MAAZ2G,GAA4BA,EAAS1H,EAAKe,GAC1CkF,GAAO,EAAOlF,EAAO,UAEhBA,EAAMC,wBACM,MAAfX,GAA+BA,EAAYL,EAAKe,MAG9CgI,EAAUzF,mBAAQ,iBAAO,CAC7B2C,SACA9B,YACAQ,OACAwD,cACAG,gBACAJ,UACAG,eACE,CAACpC,EAAQ9B,EAAWQ,EAAMwD,EAAaG,EAAeJ,EAASG,IAE/DF,GAAeI,IAAa5D,IAC9B+D,EAAgB7F,QAAUsF,EAAYa,SAASpF,SAASqF,gBAG1D,IAAMC,EAAcpI,aAAiB,WAC/BwH,GAAiBA,EAAca,OACjCb,EAAca,WAGZC,EAAkBtI,aAAiB,WACvC,IAAM8H,EAAOH,EAAgB5F,QACzBwG,EAAYvB,EAMhB,GAJiB,MAAbuB,IACFA,KAAYpB,EAAQpF,UAAWyG,YAAWrB,EAAQpF,WAAW,aAG7C,IAAdwG,IAAqC,aAAdA,GAA6B,UAAUE,KAAKX,IAAvE,CAIA,IAAMY,EAAQC,YAAIxB,EAAQpF,QAASgF,GAAc,GAC7C2B,GAASA,EAAML,OAAOK,EAAML,YAElCrF,qBAAU,WACJa,EAAMyE,IAA2BV,EAAgB7F,UACnD6F,EAAgB7F,SAAU,EAC1BqG,OAED,CAACvE,EAAM+D,EAAiBQ,EAAaE,IACxCtF,qBAAU,WACR2E,EAAgB5F,QAAU,QAG5B,IAAM6G,EAAsB,SAAC7G,EAASgD,GACpC,IAAKoC,EAAQpF,QAAS,OAAO,KAC7B,IAAM8G,EAAQF,YAAIxB,EAAQpF,QAASgF,GAC/B+B,EAAQD,EAAMxH,QAAQU,GAAWgD,EAErC,OAAO8D,EADPC,EAAQhH,KAAKiH,IAAI,EAAGjH,KAAKkH,IAAIF,EAAOD,EAAMzH,WAoF5C,OAhFA6H,YAAkB,WAAW,SAAAhJ,GAC3B,IAAIiJ,EAAkBC,EAGpBjK,EACEe,EADFf,IAEI8B,EAASf,EAAMe,OACfoI,EAAmD,OAAvCF,EAAmB/B,EAAQpF,cAAmB,EAASmH,EAAiBhB,SAASlH,GAC7FqI,EAAyD,OAA3CF,EAAqB7B,EAAUvF,cAAmB,EAASoH,EAAmBjB,SAASlH,GAK3G,KAFgB,kBAAkByH,KAAKzH,EAAOsI,YAEtB,MAARpK,GAAuB,WAARA,GAAoBkK,MAI9CA,GAAaC,KAIN,QAARnK,GAAmBiI,EAAQpF,SAAY8B,GAA3C,CAIA8D,EAAgB5F,QAAU9B,EAAM6H,KAChC,IAAMyB,EAAO,CACXxB,cAAe9H,EACfY,OAAQZ,EAAM6H,MAGhB,OAAQ5I,GACN,IAAK,UAED,IAAMsK,EAAOZ,EAAoB5H,GAAS,GAG1C,OAFIwI,GAAQA,EAAKnB,OAAOmB,EAAKnB,aAC7BpI,EAAMwJ,iBAIV,IAAK,YAGH,GAFAxJ,EAAMwJ,iBAED5F,EAEE,CACL,IAAM2F,EAAOZ,EAAoB5H,EAAQ,GACrCwI,GAAQA,EAAKnB,OAAOmB,EAAKnB,aAH7BvB,GAAS,EAAMyC,GAMjB,OAEF,IAAK,MAKHG,YAAiB5G,SAAU,SAAS,SAAA6G,GAClC,IAAIC,GAEU,QAAVD,EAAEzK,KAAkByK,EAAE3I,SAAqD,OAAxC4I,EAAoBzC,EAAQpF,UAAoB6H,EAAkB1B,SAASyB,EAAE3I,SAClH8F,GAAS,EAAOyC,KAEjB,CACDM,MAAM,IAER,MAEF,IAAK,SACS,WAAR3K,IACFe,EAAMwJ,iBACNxJ,EAAM6J,mBAGRhD,GAAS,EAAOyC,QAMF/H,cAAK/B,IAAkBsK,SAAU,CACnDC,MAAOhC,EACPf,SAAuBzF,cAAK4C,IAAgB2F,SAAU,CACpDC,MAAO/B,EACPhB,SAAUA,MAKhBR,EAAS/E,YAAc,WACvB+E,EAASwD,KAAO3G,IAChBmD,EAASyD,OAAStE,IAClBa,EAAS0D,KAAO9J,IACDoG,Q,8LCvMT2D,EAAiBC,YAAmB,kBAAmB,CAC3D1E,aAAc,CACZ2E,KAAM,aAGJC,EAAkBF,YAAmB,mBAAoB,CAC7D3J,UAAW,KACXiF,aAAc,CACZ2E,KAAM,eAGJE,EAAmBH,YAAmB,qBAAsB,CAChE3J,UAAW,SAOP+F,EAAwBnG,cAAiB,SAACmK,EAAQjK,GACtD,MAcIkK,YAAgBD,EAAQ,CAC1B5G,KAAM,aAdNN,EADF,EACEA,SACAe,EAFF,EAEEA,KACAT,EAHF,EAGEA,KACAL,EAJF,EAIEA,UACAC,EALF,EAKEA,MACAmD,EANF,EAMEA,SACAE,EAPF,EAOEA,SACAE,EARF,EAQEA,qBARF,IAUEvG,GAAIC,OAVN,MAUkB,MAVlB,EAYEiK,GAZF,EAWEC,OAXF,EAYED,WACG/J,EAbL,iBAiBM2D,EAAe/E,qBAAWgF,KAC1B5C,EAASuC,YAAmBZ,EAAU,YACtCH,EAAQyH,cAYRC,EAAe9K,aAAiB,SAAC6H,EAAU0B,GAVtB,IAAA1I,EAWrB0I,EAAKxB,cAAcgD,gBAAkBjI,UAA6B,YAAhByG,EAAK1I,QAAmD,WAA3B0I,EAAKxB,cAAc7I,MAAmBqK,EAAK1I,OAAS,aAX9GA,EAYF0I,EAAK1I,SAVV,IAAd8J,EAAuC,UAAX9J,EAEd,WAAd8J,EAA0C,cAAX9J,EAEjB,YAAd8J,GAA2C,WAAX9J,KAMa,MAAZiG,GAA4BA,EAASe,EAAU0B,OAEhFrG,EAAqB,QAAVO,EACXJ,EAAYJ,YAAyBC,EAAUoB,EAAMlB,GACrD4H,EAAexI,mBAAQ,iBAAO,CAClCiB,QACAa,OACAlB,WACE,CAACK,EAAOa,EAAMlB,IAClB,OAAoB5B,cAAK4C,IAAgB2F,SAAU,CACjDC,MAAOgB,EACP/D,SAAuBzF,cAAKyJ,EAAc,CACxC5H,UAAWA,EACXQ,KAAMA,EACN+C,SAAUA,EACVE,SAAUgE,EACV9D,qBAAsBA,EACtBD,aAAc,IAAF,OAAMnF,EAAN,uCACZqF,SAAU1C,EAAe3D,EAAMqG,SAAwBzF,cAAKd,EAAD,YAAC,eAAgBE,GAAjB,IACzDJ,IAAKA,EACLgD,UAAWkC,IAAWlC,EAAWK,GAAQ,SAAUS,GAAiB,SAATA,IAAoB1C,EAAiB,OAAT0C,GAAiB,SAAmB,QAATA,GAAkB,UAAoB,UAATA,GAAoB,uBAK3KmC,EAAS/E,YAAc,WACvB+E,EAASd,aAjEY,CACnBiF,QAAQ,EACRnH,MAAO,QACPkH,WAAW,GA+DEzJ,WAAOO,OAAOgF,EAAU,CACrCyD,OAAQtE,IACRqE,KAAM3G,IACN6G,KAAM9J,IACN6K,SAAUV,EACVW,QAASZ,EACTa,OAAQhB,K,iCCrGV,6CACM3K,EAAiCa,gBAAoB,MAC9CT,EAAe,SAACD,GAA0B,IAAhBT,EAAgB,uDAAT,KAC5C,OAAgB,MAAZS,EAAyBiC,OAAOjC,GAC7BT,GAAQ,MAEFM,O,iCCNf,6CAmBe,SAASiI,EAAYsC,GAClC,IAAIxJ,EAAM6F,iBAAO,MAIjB,OAHArD,qBAAU,WACRxC,EAAIuB,QAAUiI,KAETxJ,EAAIuB,U,iCCxBb,qDAYe,SAASsJ,EAAiBC,EAAarL,EAAOsL,EAAUC,QACrD,IAAZA,IACFA,GAAU,GAGZ,IAAIC,EAAUzL,YAAiBuL,GAC/BvI,qBAAU,WACR,IAAIhC,EAAgC,oBAAhBsK,EAA6BA,IAAgBA,EAEjE,OADAtK,EAAO0I,iBAAiBzJ,EAAOwL,EAASD,GACjC,WACL,OAAOxK,EAAO0K,oBAAoBzL,EAAOwL,EAASD,MAEnD,CAACF,M,iCCxBN,oEAEO,SAASlL,EAASuL,GACvB,gBAH8B,eAG9B,OAA6BA,GAExB,SAASC,EAASD,GACvB,gBAL6B,QAK7B,OAA4BA,K,iCCN9B,sDAiBe,SAAS1C,EAAkBhJ,EAAOwL,EAASD,QACxC,IAAZA,IACFA,GAAU,GAGZ,IAAIK,EAAiBtF,uBAAY,WAC/B,OAAOzD,WACN,IACH,OAAOuI,YAAiBQ,EAAgB5L,EAAOwL,EAASD,K,iCCzB1D,WAEMvD,EAAuB3H,gBAAoB,MACjD2H,EAAQvG,YAAc,gBACPuG,O,8ECeA6D,MARf,SAAyB9B,GACvB,IAAIxJ,EAAM6F,iBAAO2D,GAIjB,OAHAhH,qBAAU,WACRxC,EAAIuB,QAAUiI,IACb,CAACA,IACGxJ,GCdM,SAASR,EAAiB+L,GACvC,IAAIvL,EAAMsL,EAAgBC,GAC1B,OAAOxF,uBAAY,WACjB,OAAO/F,EAAIuB,SAAWvB,EAAIuB,QAAQiK,MAAMxL,EAAKyL,aAC5C,CAACzL,M,iCCNN,sCAAI0L,EAAUC,SAASC,UAAUC,KAAKC,KAAKH,SAASC,UAAUE,KAAM,GAAGC,OAQxD,SAAS5D,EAAInC,EAASgG,GACnC,OAAON,EAAQ1F,EAAQiG,iBAAiBD,M,8LCHpCnM,EAA4BC,cAAiB,WAShDE,GAAQ,IART+C,EAQS,EARTA,SACAC,EAOS,EAPTA,UACA5D,EAMS,EANTA,SAMS,IALTP,gBAKS,SAJTC,EAIS,EAJTA,QACAF,EAGS,EAHTA,OAGS,IAFTqB,GAAIC,OAEK,MAFOgM,IAEP,EADN9L,EACM,iBACHgB,EAASuC,YAAmBZ,EAAU,iBAC5C,EAAkCtE,YAAgB,CAChDC,IAAKU,EACLT,KAAMyB,EAAMzB,KACZE,WACAC,UACAF,WALF,mBAAOmC,EAAP,KAA0BgI,EAA1B,KAOA,OAAoB/H,cAAKd,EAAD,YAAC,2BAAgBE,GACpCW,GADmB,IAEtBf,IAAKA,EACLgD,UAAWkC,IAAWlC,EAAW5B,EAAQ2H,EAAKzJ,UAAY,SAAUT,GAAY,kBAGpFgB,EAAaqB,YAAc,eACZrB,O,iCC/Bf,WACMV,EAA0BW,gBAAoB,MACpDX,EAAW+B,YAAc,aACV/B,O,iCCHf,WACMyE,EAA+B9D,gBAAoB,MAC1C8D,O,kCCFf,uBACI3B,EAAkC,qBAAXC,GAC3BA,EAAOC,WACsB,gBAA7BD,EAAOC,UAAUC,QACbC,EAA4B,qBAAbC,SAUJD,OAASJ,EAAgBM,kBAAkBC,c,mDCd1D,6CAkBe,SAASoD,IAQtB,OALkBuG,sBAAW,SAAUC,GACrC,OAAQA,KACP,GACwB,K,8GCtBb,IAAIC,Q,oBCFd7N,EAAY,CAAC,aAmBnB,IAAM0N,EAAsBpM,cAAiB,SAACC,EAAMC,GAC9C,IATwBrB,EAU1B2N,EACEvM,EADFuM,UAEElM,EArBN,SAAuCC,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,GAAI,IAA2D3B,EAAK6B,EAA5DC,EAAS,GAAQC,EAAaC,OAAOC,KAAKN,GAAqB,IAAKE,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IAAO7B,EAAM+B,EAAWF,GAAQD,EAASO,QAAQnC,IAAQ,IAAa8B,EAAO9B,GAAO2B,EAAO3B,IAAQ,OAAO8B,EAqB5RM,CAA8Bf,EAAMvB,GAEhD,EAAsB+N,YAAe7L,OAAOO,OAAO,CACjD6H,QAAS,KACR1I,IAFIoM,EAAP,oBAGMC,EAAgBjN,aAAiB,SAAA2J,GACrCqD,EAAYF,UAAUnD,GACT,MAAbmD,GAA6BA,EAAUnD,MAGzC,QAtB4BxK,EAsBVyB,EAAMzB,OArBQ,MAAhBA,EAAK+N,QAqBatM,EAAM0J,OAAuB,WAAf1J,EAAM0J,KAQlC9I,cAAK,IAAKN,OAAOO,OAAO,CAC1CjB,IAAKA,GACJI,EAAO,CACRkM,UAAWA,KAVStL,cAAK,IAAKN,OAAOO,OAAO,CAC1CjB,IAAKA,GACJI,EAAOoM,EAAa,CACrBF,UAAWG,QAUjBP,EAAOhL,YAAc,SACNgL,O,iCChDf,WACMtI,EAA+B9D,gBAAoB,IACzD8D,EAAgB1C,YAAc,kBACf0C,O,yICHTpF,EAAY,CAAC,YAcnB,IAAMmO,EAAO,aAaN,SAAStI,IAA8B,IAAduI,EAAc,uDAAJ,GAClCnF,EAAUzI,qBAAW4E,KAC3B,EAAuCiJ,cAAvC,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcnH,kBAAO,GAEzB1C,EAQEyJ,EARFzJ,KACAoB,EAOEqI,EAPFrI,OACArB,EAME0J,EANF1J,eAHF,EASI0J,EALFK,aAJF,SAKaC,EAITN,EAJF/J,UALF,EASI+J,EAHFrJ,oBANF,MAMiB,GANjB,IASIqJ,EAFFO,4BAPF,WASIP,EADFtI,UAAW8I,OARb,QAQiC3F,EARjC,EAUMpE,EAAoD,OAAjC,MAAXoE,OAAkB,EAASA,EAAQpE,QAAkBuJ,EAAQvJ,KAAOoE,EAAQpE,KAEtFA,IAAS2J,EAAYzL,UACvByL,EAAYzL,SAAU,GAGxB,IAAM8L,EAAc,SAAAlE,GACP,MAAX1B,GAA2BA,EAAQ9C,QAAO,EAAOwE,IAGnD,EAKI1B,GAAW,GAJb5E,EADF,EACEA,UACA+D,EAFF,EAEEA,QACAC,EAHF,EAGEA,YACAG,EAJF,EAIEA,cAEItC,EAASJ,YAAU0C,EAAeH,EAAayG,YAA6B,CAChFzK,UAAWqK,GAAqBrK,GAAa,eAC7C0K,QAASH,EACTI,aAAsC,MAAxBL,EAA+B9J,EAAO8J,EACpD5I,SACApB,OACA8J,QACAH,eACAvJ,kBAEIiB,EAAY9D,OAAOO,OAAO,CAC9BjB,IAAK4G,GAAW+F,EAChB,kBAAoC,MAAjB3F,OAAwB,EAASA,EAAcyG,IACjE/I,EAAOgJ,WAAWhJ,OAAQ,CAC3BO,MAAOP,EAAOiJ,OAAOjJ,SAEjBkJ,EAAW,CACfvK,OACAR,YACA4B,SAAUuI,EAAYzL,QACtBoD,OAAmB,MAAX8C,OAAkB,EAASA,EAAQ9C,OAC3CD,OAAQ0I,EAAkB1I,EAAS,KACnCmJ,WAAYT,EAAkB1M,OAAOO,OAAO,CAC1CjB,IAAK+M,GACJrI,EAAOgJ,WAAWI,MAAO,CAC1B7I,MAAOP,EAAOiJ,OAAOG,QAClB,IAMP,OAJAC,YAAalH,EAAawG,EAAa,CACrCW,aAAc9K,EACdrE,UAAWwE,IAEN,CAACmB,EAAWoJ,GAYrB,SAAS9K,EAAa/C,GAChB,IACF0G,EACE1G,EADF0G,SAIF,EAAsBpC,EAzGxB,SAAuChE,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,GAAI,IAA2D3B,EAAK6B,EAA5DC,EAAS,GAAQC,EAAaC,OAAOC,KAAKN,GAAqB,IAAKE,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IAAO7B,EAAM+B,EAAWF,GAAQD,EAASO,QAAQnC,IAAQ,IAAa8B,EAAO9B,GAAO2B,EAAO3B,IAAQ,OAAO8B,EAuG1RM,CAA8Bf,EAAMvB,IAElD,mBAAO4B,EAAP,KAAc2I,EAAd,KACA,OAAoB/H,cAAKiN,WAAW,CAClCxH,SAAUA,EAASrG,EAAO2I,KAI9BjG,EAAa5B,YAAc,eAC3B4B,EAAaqC,aAvBQ,CACnBb,WAAW,GAyBExB,O,iCCrHf,mDAGe,SAAS+B,EAAyB7E,EAAKkO,GAEN,OAAOlO,I,kJCC1CgI,EAAa,SAAAmG,GACxB,IAAIC,EAEJ,MAA4G,UAApD,OAA/CA,EAAmBD,EAAGE,aAAa,cAAmB,EAASD,EAAiBE,gBAGrF3B,EAAO,aASN,SAASnH,IACd,IAAMiI,EAAK7L,cACX,EAKI5C,qBAAW4E,MAAoB,GALnC,IACEP,YADF,aAEEsB,cAFF,MAEWgI,EAFX,EAGE5F,EAHF,EAGEA,UACAF,EAJF,EAIEA,YAEItH,EAAcwG,uBAAY,SAAAoD,GAC9BxE,GAAQtB,EAAM8F,KACb,CAAC9F,EAAMsB,IACJvE,EAAQ,CACZqN,KACAzN,IAAK+G,GAAa4F,EAClB7N,QAASS,EACT,kBAAmB8D,GASrB,OAJIwD,GAAemB,EAAWnB,KAC5BzG,EAAM,kBAAmB,GAGpB,CAACA,EAAO,CACbiD,OACAsB,WAUJ,SAASS,EAAT,GAEG,IADDqB,EACC,EADDA,SAEA,EAAsBjB,IAAtB,mBAAOpF,EAAP,KAAc2I,EAAd,KACA,OAAoB/H,cAAKiN,WAAW,CAClCxH,SAAUA,EAASrG,EAAO2I,KAI9B3D,EAAelE,YAAc,iBAGdkE","file":"static/js/2.0989d323.chunk.js","sourcesContent":["const _excluded = [\"eventKey\", \"disabled\", \"onClick\", \"active\", \"as\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport NavContext from './NavContext';\nimport Button from './Button';\nimport { dataAttr } from './DataKey';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * Create a dropdown item. Returns a set of props for the dropdown item component\n * including an `onClick` handler that prevents selection when the item is disabled\n */\nexport function useDropdownItem({\n  key,\n  href,\n  active,\n  disabled,\n  onClick\n}) {\n  const onSelectCtx = useContext(SelectableContext);\n  const navContext = useContext(NavContext);\n  const {\n    activeKey\n  } = navContext || {};\n  const eventKey = makeEventKey(key, href);\n  const isActive = active == null && key != null ? makeEventKey(activeKey) === eventKey : active;\n  const handleClick = useEventCallback(event => {\n    if (disabled) return;\n    onClick == null ? void 0 : onClick(event);\n\n    if (onSelectCtx && !event.isPropagationStopped()) {\n      onSelectCtx(eventKey, event);\n    }\n  });\n  return [{\n    onClick: handleClick,\n    'aria-disabled': disabled || undefined,\n    'aria-selected': isActive,\n    [dataAttr('dropdown-item')]: ''\n  }, {\n    isActive\n  }];\n}\nconst DropdownItem = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    eventKey,\n    disabled,\n    onClick,\n    active,\n    as: Component = Button\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [dropdownItemProps] = useDropdownItem({\n    key: eventKey,\n    href: props.href,\n    disabled,\n    onClick,\n    active\n  });\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, {\n    ref: ref\n  }, dropdownItemProps));\n});\nDropdownItem.displayName = 'DropdownItem';\nexport default DropdownItem;","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\ninterface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/** @private */\nexport function useSSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  return useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  let cur = useContext(SSRContext);\n  let isInSSRContext = cur !== defaultContext;\n  let [isSSR, setIsSSR] = useState(isInSSRContext);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof window !== 'undefined' && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}\n","import { useEffect, useLayoutEffect } from 'react';\nvar isReactNative = typeof global !== 'undefined' && // @ts-ignore\nglobal.navigator && // @ts-ignore\nglobal.navigator.product === 'ReactNative';\nvar isDOM = typeof document !== 'undefined';\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\n\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownMenu } from '@restart/ui/DropdownMenu';\nimport useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport warning from 'warning';\nimport DropdownContext from './DropdownContext';\nimport InputGroupContext from './InputGroupContext';\nimport NavbarContext from './NavbarContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  flip: true\n};\nexport function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {\n  const topStart = isRTL ? 'top-end' : 'top-start';\n  const topEnd = isRTL ? 'top-start' : 'top-end';\n  const bottomStart = isRTL ? 'bottom-end' : 'bottom-start';\n  const bottomEnd = isRTL ? 'bottom-start' : 'bottom-end';\n  const leftStart = isRTL ? 'right-start' : 'left-start';\n  const leftEnd = isRTL ? 'right-end' : 'left-end';\n  const rightStart = isRTL ? 'left-start' : 'right-start';\n  const rightEnd = isRTL ? 'left-end' : 'right-end';\n  let placement = alignEnd ? bottomEnd : bottomStart;\n  if (dropDirection === 'up') placement = alignEnd ? topEnd : topStart;else if (dropDirection === 'end') placement = alignEnd ? rightEnd : rightStart;else if (dropDirection === 'start') placement = alignEnd ? leftEnd : leftStart;\n  return placement;\n}\nconst DropdownMenu = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  align,\n  rootCloseEvent,\n  flip,\n  show: showProps,\n  renderOnMount,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  popperConfig,\n  variant,\n  ...props\n}, ref) => {\n  let alignEnd = false;\n  const isNavbar = useContext(NavbarContext);\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-menu');\n  const {\n    align: contextAlign,\n    drop,\n    isRTL\n  } = useContext(DropdownContext);\n  align = align || contextAlign;\n  const isInputGroup = useContext(InputGroupContext);\n  const alignClasses = [];\n\n  if (align) {\n    if (typeof align === 'object') {\n      const keys = Object.keys(align);\n      process.env.NODE_ENV !== \"production\" ? warning(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`') : void 0;\n\n      if (keys.length) {\n        const brkPoint = keys[0];\n        const direction = align[brkPoint]; // .dropdown-menu-end is required for responsively aligning\n        // left in addition to align left classes.\n\n        alignEnd = direction === 'start';\n        alignClasses.push(`${prefix}-${brkPoint}-${direction}`);\n      }\n    } else if (align === 'end') {\n      alignEnd = true;\n    }\n  }\n\n  const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);\n  const [menuProps, {\n    hasShown,\n    popper,\n    show,\n    toggle\n  }] = useDropdownMenu({\n    flip,\n    rootCloseEvent,\n    show: showProps,\n    usePopper: !isNavbar && alignClasses.length === 0,\n    offset: [0, 2],\n    popperConfig,\n    placement\n  });\n  menuProps.ref = useMergedRefs(useWrappedRefWithWarning(ref, 'DropdownMenu'), menuProps.ref);\n  useIsomorphicEffect(() => {\n    // Popper's initial position for the menu is incorrect when\n    // renderOnMount=true. Need to call update() to correct it.\n    if (show) popper == null ? void 0 : popper.update();\n  }, [show]);\n  if (!hasShown && !renderOnMount && !isInputGroup) return null; // For custom components provide additional, non-DOM, props;\n\n  if (typeof Component !== 'string') {\n    menuProps.show = show;\n\n    menuProps.close = () => toggle == null ? void 0 : toggle(false);\n\n    menuProps.align = align;\n  }\n\n  let style = props.style;\n\n  if (popper != null && popper.placement) {\n    // we don't need the default popper style,\n    // menus are display: none when not shown.\n    style = { ...props.style,\n      ...menuProps.style\n    };\n    props['x-placement'] = popper.placement;\n  }\n\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...menuProps,\n    style: style // Bootstrap css requires this data attrib to style responsive menus.\n    ,\n    ...((alignClasses.length || isNavbar) && {\n      'data-bs-popper': 'static'\n    }),\n    className: classNames(className, prefix, show && 'show', alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)\n  });\n});\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = defaultProps;\nexport default DropdownMenu;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownToggle } from '@restart/ui/DropdownToggle';\nimport DropdownContext from '@restart/ui/DropdownContext';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport Button from './Button';\nimport InputGroupContext from './InputGroupContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownToggle = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  split,\n  className,\n  childBsPrefix,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = Button,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-toggle');\n  const dropdownContext = useContext(DropdownContext);\n  const isInputGroup = useContext(InputGroupContext);\n\n  if (childBsPrefix !== undefined) {\n    props.bsPrefix = childBsPrefix;\n  }\n\n  const [toggleProps] = useDropdownToggle();\n  toggleProps.ref = useMergedRefs(toggleProps.ref, useWrappedRefWithWarning(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the\n  // underlying component, to allow it to render size and style variants.\n\n  return /*#__PURE__*/_jsx(Component, {\n    className: classNames(className, prefix, split && `${prefix}-split`, !!isInputGroup && (dropdownContext == null ? void 0 : dropdownContext.show) && 'show'),\n    ...toggleProps,\n    ...props\n  });\n});\nDropdownToggle.displayName = 'DropdownToggle';\nexport default DropdownToggle;","import qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport { useCallback, useRef, useEffect, useMemo, useContext } from 'react';\nimport * as React from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useGlobalListener from '@restart/hooks/useGlobalListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle, { isRoleMenu } from './DropdownToggle';\nimport DropdownItem from './DropdownItem';\nimport SelectableContext from './SelectableContext';\nimport { dataAttr } from './DataKey';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useRefWithUpdate() {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(null);\n  const attachRef = useCallback(element => {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\n * @displayName Dropdown\n * @public\n */\n\n\nfunction Dropdown({\n  defaultShow,\n  show: rawShow,\n  onSelect,\n  onToggle: rawOnToggle,\n  itemSelector = `* [${dataAttr('dropdown-item')}]`,\n  focusFirstItemOnShow,\n  placement = 'bottom-start',\n  children\n}) {\n  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle); // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n  const [menuRef, setMenu] = useRefWithUpdate();\n  const menuElement = menuRef.current;\n  const [toggleRef, setToggle] = useRefWithUpdate();\n  const toggleElement = toggleRef.current;\n  const lastShow = usePrevious(show);\n  const lastSourceEvent = useRef(null);\n  const focusInDropdown = useRef(false);\n  const onSelectCtx = useContext(SelectableContext);\n  const toggle = useCallback((nextShow, event, source = event == null ? void 0 : event.type) => {\n    onToggle(nextShow, {\n      originalEvent: event,\n      source\n    });\n  }, [onToggle]);\n  const handleSelect = useEventCallback((key, event) => {\n    onSelect == null ? void 0 : onSelect(key, event);\n    toggle(false, event, 'select');\n\n    if (!event.isPropagationStopped()) {\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    }\n  });\n  const context = useMemo(() => ({\n    toggle,\n    placement,\n    show,\n    menuElement,\n    toggleElement,\n    setMenu,\n    setToggle\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  const focusToggle = useEventCallback(() => {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  const maybeFocusFirst = useEventCallback(() => {\n    const type = lastSourceEvent.current;\n    let focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && isRoleMenu(menuRef.current) ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    const first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(() => {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(() => {\n    lastSourceEvent.current = null;\n  });\n\n  const getNextFocusedChild = (current, offset) => {\n    if (!menuRef.current) return null;\n    const items = qsa(menuRef.current, itemSelector);\n    let index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  useGlobalListener('keydown', event => {\n    var _menuRef$current, _toggleRef$current;\n\n    const {\n      key\n    } = event;\n    const target = event.target;\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    const isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {\n      return;\n    }\n\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n\n    if (key === 'Tab' && (!menuRef.current || !show)) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n    const meta = {\n      originalEvent: event,\n      source: event.type\n    };\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          const next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          onToggle(true, meta);\n        } else {\n          const next = getNextFocusedChild(target, 1);\n          if (next && next.focus) next.focus();\n        }\n\n        return;\n\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(document, 'keyup', e => {\n          var _menuRef$current2;\n\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, meta);\n          }\n        }, {\n          once: true\n        });\n        break;\n\n      case 'Escape':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        onToggle(false, meta);\n        break;\n\n      default:\n    }\n  });\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(DropdownContext.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\n\nDropdown.displayName = 'Dropdown';\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nDropdown.Item = DropdownItem;\nexport default Dropdown;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport BaseDropdown from '@restart/ui/Dropdown';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownItem from './DropdownItem';\nimport DropdownMenu, { getDropdownMenuPlacement } from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nimport InputGroupContext from './InputGroupContext';\nimport { useBootstrapPrefix, useIsRTL } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownHeader = createWithBsPrefix('dropdown-header', {\n  defaultProps: {\n    role: 'heading'\n  }\n});\nconst DropdownDivider = createWithBsPrefix('dropdown-divider', {\n  Component: 'hr',\n  defaultProps: {\n    role: 'separator'\n  }\n});\nconst DropdownItemText = createWithBsPrefix('dropdown-item-text', {\n  Component: 'span'\n});\nconst defaultProps = {\n  navbar: false,\n  align: 'start',\n  autoClose: true\n};\nconst Dropdown = /*#__PURE__*/React.forwardRef((pProps, ref) => {\n  const {\n    bsPrefix,\n    drop,\n    show,\n    className,\n    align,\n    onSelect,\n    onToggle,\n    focusFirstItemOnShow,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    navbar: _4,\n    autoClose,\n    ...props\n  } = useUncontrolled(pProps, {\n    show: 'onToggle'\n  });\n  const isInputGroup = useContext(InputGroupContext);\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown');\n  const isRTL = useIsRTL();\n\n  const isClosingPermitted = source => {\n    // autoClose=false only permits close on button click\n    if (autoClose === false) return source === 'click'; // autoClose=inside doesn't permit close on rootClose\n\n    if (autoClose === 'inside') return source !== 'rootClose'; // autoClose=outside doesn't permit close on select\n\n    if (autoClose === 'outside') return source !== 'select';\n    return true;\n  };\n\n  const handleToggle = useEventCallback((nextShow, meta) => {\n    if (meta.originalEvent.currentTarget === document && (meta.source !== 'keydown' || meta.originalEvent.key === 'Escape')) meta.source = 'rootClose';\n    if (isClosingPermitted(meta.source)) onToggle == null ? void 0 : onToggle(nextShow, meta);\n  });\n  const alignEnd = align === 'end';\n  const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);\n  const contextValue = useMemo(() => ({\n    align,\n    drop,\n    isRTL\n  }), [align, drop, isRTL]);\n  return /*#__PURE__*/_jsx(DropdownContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(BaseDropdown, {\n      placement: placement,\n      show: show,\n      onSelect: onSelect,\n      onToggle: handleToggle,\n      focusFirstItemOnShow: focusFirstItemOnShow,\n      itemSelector: `.${prefix}-item:not(.disabled):not(:disabled)`,\n      children: isInputGroup ? props.children : /*#__PURE__*/_jsx(Component, { ...props,\n        ref: ref,\n        className: classNames(className, show && 'show', (!drop || drop === 'down') && prefix, drop === 'up' && 'dropup', drop === 'end' && 'dropend', drop === 'start' && 'dropstart')\n      })\n    })\n  });\n});\nDropdown.displayName = 'Dropdown';\nDropdown.defaultProps = defaultProps;\nexport default Object.assign(Dropdown, {\n  Toggle: DropdownToggle,\n  Menu: DropdownMenu,\n  Item: DropdownItem,\n  ItemText: DropdownItemText,\n  Divider: DropdownDivider,\n  Header: DropdownHeader\n});","import * as React from 'react';\nconst SelectableContext = /*#__PURE__*/React.createContext(null);\nexport const makeEventKey = (eventKey, href = null) => {\n  if (eventKey != null) return String(eventKey);\n  return href || null;\n};\nexport default SelectableContext;","import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}","import { useEffect } from 'react';\nimport useEventCallback from './useEventCallback';\n\n/**\n * Attaches an event handler outside directly to specified DOM element\n * bypassing the react synthetic event system.\n *\n * @param element The target to listen for events on\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useEventListener(eventTarget, event, listener, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var handler = useEventCallback(listener);\n  useEffect(function () {\n    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    target.addEventListener(event, handler, capture);\n    return function () {\n      return target.removeEventListener(event, handler, capture);\n    };\n  }, [eventTarget]);\n}","export const ATTRIBUTE_PREFIX = `data-rr-ui-`;\nexport const PROPERTY_PREFIX = `rrUi`;\nexport function dataAttr(property) {\n  return `${ATTRIBUTE_PREFIX}${property}`;\n}\nexport function dataProp(property) {\n  return `${PROPERTY_PREFIX}${property}`;\n}","import useEventListener from './useEventListener';\nimport { useCallback } from 'react';\n\n/**\n * Attaches an event handler outside directly to the `document`,\n * bypassing the react synthetic event system.\n *\n * ```ts\n * useGlobalListener('keydown', (event) => {\n *  console.log(event.key)\n * })\n * ```\n *\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useGlobalListener(event, handler, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var documentTarget = useCallback(function () {\n    return document;\n  }, []);\n  return useEventListener(documentTarget, event, handler, capture);\n}","import * as React from 'react'; // TODO: check\n\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'NavbarContext';\nexport default context;","import { useEffect, useRef } from 'react';\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded befor being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\nfunction useCommittedRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nexport default useCommittedRef;","import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  var ref = useCommittedRef(fn);\n  return useCallback(function () {\n    return ref.current && ref.current.apply(ref, arguments);\n  }, [ref]);\n}","var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\n/**\n * Runs `querySelectorAll` on a given element.\n * \n * @param element the element\n * @param selector the selector\n */\n\nexport default function qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useDropdownItem } from '@restart/ui/DropdownItem';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  eventKey,\n  disabled = false,\n  onClick,\n  active,\n  as: Component = Anchor,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-item');\n  const [dropdownItemProps, meta] = useDropdownItem({\n    key: eventKey,\n    href: props.href,\n    disabled,\n    onClick,\n    active\n  });\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...dropdownItemProps,\n    ref: ref,\n    className: classNames(className, prefix, meta.isActive && 'active', disabled && 'disabled')\n  });\n});\nDropdownItem.displayName = 'DropdownItem';\nexport default DropdownItem;","import * as React from 'react';\nconst NavContext = /*#__PURE__*/React.createContext(null);\nNavContext.displayName = 'NavContext';\nexport default NavContext;","import * as React from 'react';\nconst DropdownContext = /*#__PURE__*/React.createContext(null);\nexport default DropdownContext;","import { useEffect, useLayoutEffect } from 'react';\nvar isReactNative = typeof global !== 'undefined' && // @ts-ignore\nglobal.navigator && // @ts-ignore\nglobal.navigator.product === 'ReactNative';\nvar isDOM = typeof document !== 'undefined';\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\n\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;","import { useReducer } from 'react';\n/**\n * Returns a function that triggers a component update. the hook equivalent to\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\n * is preferable but may be required in some advanced usages of refs for interop or\n * when direct DOM manipulation is required.\n *\n * ```ts\n * const forceUpdate = useForceUpdate();\n *\n * const updateOnClick = useCallback(() => {\n *  forceUpdate()\n * }, [forceUpdate])\n *\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n * ```\n */\n\nexport default function useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are stricting equal to the last state value\n  var _useReducer = useReducer(function (state) {\n    return !state;\n  }, false),\n      dispatch = _useReducer[1];\n\n  return dispatch;\n}","import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nvar targetMap = new WeakMap();\nvar resizeObserver;\n\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(function (entries) {\n    entries.forEach(function (entry) {\n      var handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\n\n\nexport default function useResizeObserver(element) {\n  var _useState = useState(null),\n      rect = _useState[0],\n      setRect = _useState[1];\n\n  useEffect(function () {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, function (rect) {\n      setRect(rect);\n    });\n    return function () {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}","const _excluded = [\"onKeyDown\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/anchor-has-content */\nimport * as React from 'react';\nimport { useEventCallback } from '@restart/hooks';\nimport { useButtonProps } from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n\n/**\n * An generic `<a>` component that covers a few A11y cases, ensuring that\n * cases where the `href` is missing or trivial like \"#\" are treated like buttons.\n */\nconst Anchor = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    onKeyDown\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps] = useButtonProps(Object.assign({\n    tagName: 'a'\n  }, props));\n  const handleKeyDown = useEventCallback(e => {\n    buttonProps.onKeyDown(e);\n    onKeyDown == null ? void 0 : onKeyDown(e);\n  });\n\n  if (isTrivialHref(props.href) && !props.role || props.role === 'button') {\n    return /*#__PURE__*/_jsx(\"a\", Object.assign({\n      ref: ref\n    }, props, buttonProps, {\n      onKeyDown: handleKeyDown\n    }));\n  }\n\n  return /*#__PURE__*/_jsx(\"a\", Object.assign({\n    ref: ref\n  }, props, {\n    onKeyDown: onKeyDown\n  }));\n});\nAnchor.displayName = 'Anchor';\nexport default Anchor;","import * as React from 'react';\nconst DropdownContext = /*#__PURE__*/React.createContext({});\nDropdownContext.displayName = 'DropdownContext';\nexport default DropdownContext;","const _excluded = [\"children\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useContext, useRef } from 'react';\nimport * as React from 'react';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport DropdownContext from './DropdownContext';\nimport usePopper from './usePopper';\nimport useRootClose from './useRootClose';\nimport mergeOptionsWithPopperConfig from './mergeOptionsWithPopperConfig';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst noop = () => {};\n/**\n * @memberOf Dropdown\n * @param {object}  options\n * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection\n * @param {[number, number]} options.offset Define an offset distance between the Menu and the Toggle\n * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`\n * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.\n * @param {string}  options.rootCloseEvent The pointer event to listen for when determining \"clicks outside\" the menu for triggering a close.\n * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.\n */\n\n\nexport function useDropdownMenu(options = {}) {\n  const context = useContext(DropdownContext);\n  const [arrowElement, attachArrowRef] = useCallbackRef();\n  const hasShownRef = useRef(false);\n  const {\n    flip,\n    offset,\n    rootCloseEvent,\n    fixed = false,\n    placement: placementOverride,\n    popperConfig = {},\n    enableEventListeners = true,\n    usePopper: shouldUsePopper = !!context\n  } = options;\n  const show = (context == null ? void 0 : context.show) == null ? !!options.show : context.show;\n\n  if (show && !hasShownRef.current) {\n    hasShownRef.current = true;\n  }\n\n  const handleClose = e => {\n    context == null ? void 0 : context.toggle(false, e);\n  };\n\n  const {\n    placement,\n    setMenu,\n    menuElement,\n    toggleElement\n  } = context || {};\n  const popper = usePopper(toggleElement, menuElement, mergeOptionsWithPopperConfig({\n    placement: placementOverride || placement || 'bottom-start',\n    enabled: shouldUsePopper,\n    enableEvents: enableEventListeners == null ? show : enableEventListeners,\n    offset,\n    flip,\n    fixed,\n    arrowElement,\n    popperConfig\n  }));\n  const menuProps = Object.assign({\n    ref: setMenu || noop,\n    'aria-labelledby': toggleElement == null ? void 0 : toggleElement.id\n  }, popper.attributes.popper, {\n    style: popper.styles.popper\n  });\n  const metadata = {\n    show,\n    placement,\n    hasShown: hasShownRef.current,\n    toggle: context == null ? void 0 : context.toggle,\n    popper: shouldUsePopper ? popper : null,\n    arrowProps: shouldUsePopper ? Object.assign({\n      ref: attachArrowRef\n    }, popper.attributes.arrow, {\n      style: popper.styles.arrow\n    }) : {}\n  };\n  useRootClose(menuElement, handleClose, {\n    clickTrigger: rootCloseEvent,\n    disabled: !show\n  });\n  return [menuProps, metadata];\n}\nconst defaultProps = {\n  usePopper: true\n};\n\n/**\n * Also exported as `<Dropdown.Menu>` from `Dropdown`.\n *\n * @displayName DropdownMenu\n * @memberOf Dropdown\n */\nfunction DropdownMenu(_ref) {\n  let {\n    children\n  } = _ref,\n      options = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [props, meta] = useDropdownMenu(options);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: children(props, meta)\n  });\n}\n\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = defaultProps;\n/** @component */\n\nexport default DropdownMenu;","import invariant from 'invariant';\nimport { useCallback } from 'react';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nexport default function useWrappedRefWithWarning(ref, componentName) {\n  // @ts-ignore\n  if (!(process.env.NODE_ENV !== \"production\")) return ref; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  const warningRef = useCallback(refValue => {\n    !(refValue == null || !refValue.isReactComponent) ? process.env.NODE_ENV !== \"production\" ? invariant(false, `${componentName} injected a ref to a provided \\`as\\` component that resolved to a component instance instead of a DOM element. ` + 'Use `React.forwardRef` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element') : invariant(false) : void 0;\n  }, [componentName]); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  return useMergedRefs(warningRef, ref);\n}","import { useContext, useCallback } from 'react';\nimport * as React from 'react';\nimport { useSSRSafeId } from './ssr';\nimport DropdownContext from './DropdownContext';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const isRoleMenu = el => {\n  var _el$getAttribute;\n\n  return ((_el$getAttribute = el.getAttribute('role')) == null ? void 0 : _el$getAttribute.toLowerCase()) === 'menu';\n};\n\nconst noop = () => {};\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\n\n\nexport function useDropdownToggle() {\n  const id = useSSRSafeId();\n  const {\n    show = false,\n    toggle = noop,\n    setToggle,\n    menuElement\n  } = useContext(DropdownContext) || {};\n  const handleClick = useCallback(e => {\n    toggle(!show, e);\n  }, [show, toggle]);\n  const props = {\n    id,\n    ref: setToggle || noop,\n    onClick: handleClick,\n    'aria-expanded': !!show\n  }; // This is maybe better down in an effect, but\n  // the component is going to update anyway when the menu element\n  // is set so might return new props.\n\n  if (menuElement && isRoleMenu(menuElement)) {\n    props['aria-haspopup'] = true;\n  }\n\n  return [props, {\n    show,\n    toggle\n  }];\n}\n\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\nfunction DropdownToggle({\n  children\n}) {\n  const [props, meta] = useDropdownToggle();\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: children(props, meta)\n  });\n}\n\nDropdownToggle.displayName = 'DropdownToggle';\n/** @component */\n\nexport default DropdownToggle;"],"sourceRoot":""}