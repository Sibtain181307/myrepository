{"version":3,"sources":["app/views/extra-kits/ImageCropper/cropImage.js","app/views/extra-kits/ImageCropper/ImageCropper.js","app/views/extra-kits/AppImageCropper.jsx"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","a","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","x","y","ImageCropper","croppedImg","setCroppedImg","againCrop","setAgainCrop","handleFileSelect","useState","crop","setCrop","setRotation","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","onCropComplete","useCallback","croppedArea","showCroppedImage","croppedImage","convertDataUrl","toDataURL","console","className","alt","aspect","onCropChange","onRotationChange","onZoomChange","value","type","class","style","onChange","e","target","step","min","htmlFor","Button","as","id","accept","onClick","AppImageCropper","event","file","files","URL","createObjectURL"],"mappings":"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","file":"static/js/152.9a817503.chunk.js","sourcesContent":["const createImage = (url) =>\r\n  new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.addEventListener(\"load\", () => resolve(image));\r\n    image.addEventListener(\"error\", (error) => reject(error));\r\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\r\n    image.src = url;\r\n  });\r\n\r\nfunction getRadianAngle(degreeValue) {\r\n  return (degreeValue * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n * @param {File} image - Image File url\r\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\r\n * @param {number} rotation - optional rotation parameter\r\n */\r\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\r\n  const image = await createImage(imageSrc);\r\n  const canvas = document.createElement(\"canvas\");\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  const maxSize = Math.max(image.width, image.height);\r\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\r\n\r\n  // set each dimensions to double largest dimension to allow for a safe area for the\r\n  // image to rotate in without being clipped by canvas context\r\n  canvas.width = safeArea;\r\n  canvas.height = safeArea;\r\n\r\n  // translate canvas context to a central location on image to allow rotating around the center.\r\n  ctx.translate(safeArea / 2, safeArea / 2);\r\n  ctx.rotate(getRadianAngle(rotation));\r\n  ctx.translate(-safeArea / 2, -safeArea / 2);\r\n\r\n  // draw rotated image and store data.\r\n  ctx.drawImage(\r\n    image,\r\n    safeArea / 2 - image.width * 0.5,\r\n    safeArea / 2 - image.height * 0.5\r\n  );\r\n\r\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\r\n\r\n  // set canvas width to final desired crop size - this will clear existing context\r\n  canvas.width = pixelCrop.width;\r\n  canvas.height = pixelCrop.height;\r\n\r\n  // paste generated rotate image with correct offsets for x,y crop values.\r\n  ctx.putImageData(\r\n    data,\r\n    0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\r\n    0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y\r\n  );\r\n\r\n  // As Base64 string\r\n  // return canvas.toDataURL(\"image/jpeg\");\r\n  return canvas;\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport getCroppedImg from \"./cropImage\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst ImageCropper = ({\r\n  image,\r\n  croppedImg,\r\n  setCroppedImg,\r\n  againCrop,\r\n  setAgainCrop,\r\n  handleFileSelect,\r\n}) => {\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  const [rotation, setRotation] = useState(0);\r\n  const [zoom, setZoom] = useState(1);\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    setCroppedAreaPixels(croppedAreaPixels);\r\n  }, []);\r\n\r\n  const showCroppedImage = useCallback(async () => {\r\n    try {\r\n      const croppedImage = await getCroppedImg(\r\n        image,\r\n        croppedAreaPixels,\r\n        rotation\r\n      );\r\n      if (croppedImage) {\r\n        const convertDataUrl = croppedImage.toDataURL(\"image/jpeg\");\r\n        setCroppedImg(convertDataUrl);\r\n        setAgainCrop(true);\r\n        // const convertFileUrl = dataURLtoFile(convertDataUrl, \"cropped-image.jpeg\")\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }, [croppedAreaPixels, rotation]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {againCrop ? (\r\n          <img className=\"img-fluid\" src={croppedImg} alt=\"\" />\r\n        ) : (\r\n          <div>\r\n            <div className=\"cropContainer\">\r\n              <Cropper\r\n                image={image}\r\n                crop={crop}\r\n                rotation={rotation}\r\n                zoom={zoom}\r\n                aspect={4 / 4}\r\n                onCropChange={setCrop}\r\n                onRotationChange={setRotation}\r\n                onCropComplete={onCropComplete}\r\n                onZoomChange={setZoom}\r\n              />\r\n            </div>\r\n            <div className=\"row pt-3 mt-3\">\r\n              <div className=\"d-flex align-items-center col-6\">\r\n                <span className=\"me-3 fs-4\">ZOOM </span>\r\n                <input\r\n                  value={zoom}\r\n                  type=\"range\"\r\n                  class=\"form-range\"\r\n                  style={{ width: \"100%\" }}\r\n                  onChange={(e) => setZoom(e.target.value)}\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                />\r\n              </div>\r\n              <div className=\"d-flex align-items-center col-6\">\r\n                <span className=\"me-3 fs-4\">ROTATION </span>\r\n                <input\r\n                  value={rotation}\r\n                  type=\"range\"\r\n                  class=\"form-range\"\r\n                  style={{ width: \"100%\" }}\r\n                  onChange={(e) => setRotation(e.target.value)}\r\n                  min=\"0\"\r\n                  max=\"360\"\r\n                  step=\"1\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"d-flex align-items-center pt-3 mb-5\">\r\n        <div>\r\n          <label htmlFor=\"upload-single-file\">\r\n            <Button className=\"btn-rounded me-3\" as=\"span\">\r\n              <div className=\"flex flex-middle\">\r\n                <i className=\"i-Share-on-Cloud\"> </i>\r\n                <span>Single File</span>\r\n              </div>\r\n            </Button>\r\n          </label>\r\n          <input\r\n            className=\"d-none\"\r\n            onChange={(e) => handleFileSelect(e)}\r\n            id=\"upload-single-file\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n          />\r\n        </div>\r\n        <button\r\n          onClick={() => (againCrop ? setAgainCrop(false) : showCroppedImage())}\r\n          className=\"btn btn-rounded btn-primary\"\r\n        >\r\n          {againCrop ? \"Crop Again\" : \"Crop And Save\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCropper;\r\n","import React, { useState } from \"react\";\r\nimport ImageCropper from \"./ImageCropper/ImageCropper\";\r\n\r\nconst AppImageCropper = () => {\r\n  const [croppedImg, setCroppedImg] = useState(null);\r\n  const [againCrop, setAgainCrop] = useState(false);\r\n\r\n  const handleFileSelect = (event) => {\r\n    let file = event.target.files[0];\r\n    let src = URL.createObjectURL(file);\r\n    setCroppedImg(src);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"text-primary mb-3\">Image Cropping</h3>\r\n      {againCrop ? (\r\n        <ImageCropper\r\n          image={croppedImg}\r\n          croppedImg={croppedImg}\r\n          setCroppedImg={setCroppedImg}\r\n          againCrop={againCrop}\r\n          setAgainCrop={setAgainCrop}\r\n          handleFileSelect={handleFileSelect}\r\n        />\r\n      ) : (\r\n        <ImageCropper\r\n          image={croppedImg || \"/assets/images/photo-wide-3.jpg\"}\r\n          croppedImg={croppedImg}\r\n          setCroppedImg={setCroppedImg}\r\n          againCrop={againCrop}\r\n          setAgainCrop={setAgainCrop}\r\n          handleFileSelect={handleFileSelect}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppImageCropper;\r\n"],"sourceRoot":""}