{"version":3,"sources":["app/views/extra-kits/AppSweetAlert.jsx"],"names":["AppSweetAlert","state","basic1","basic2","success","error","warning","question","info","other1","toggleAlert","name","setState","closeAlert","this","routeSegments","path","lg","md","sm","xs","className","title","onClick","show","text","onConfirm","html","renderToStaticMarkup","variant","type","showCancelButton","console","log","onCancel","onClose","swal","fire","icon","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","value","imageUrl","imageWidth","imageHeight","imageAlt","timerInterval","timer","timerProgressBar","onBeforeOpen","showLoading","setInterval","getContent","querySelector","textContent","getTimerLeft","clearInterval","dismiss","DismissReason","input","inputAttributes","autocapitalize","showLoaderOnConfirm","preConfirm","login","fetch","response","ok","Error","statusText","json","catch","showValidationMessage","allowOutsideClick","isLoading","avatar_url","mixin","progressSteps","queue","answers","JSON","stringify","data","insertQueueStep","ip","position","footer","showClass","popup","hideClass","Component"],"mappings":"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","file":"static/js/153.a51a26d6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { Breadcrumb, SimpleCard } from \"@gull\";\r\nimport SweetAlert from \"sweetalert2-react\";\r\nimport swal from \"sweetalert2\";\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\n\r\nclass AppSweetAlert extends Component {\r\n  state = {\r\n    basic1: false,\r\n    basic2: false,\r\n    success: false,\r\n    error: false,\r\n    warning: false,\r\n    question: false,\r\n    info: false,\r\n    other1: false,\r\n  };\r\n\r\n  toggleAlert = (name) => {\r\n    this.setState({ [name]: !this.state[name] });\r\n  };\r\n\r\n  closeAlert = (name) => {\r\n    this.setState({ [name]: false });\r\n  };\r\n\r\n  render() {\r\n    let { basic1, basic2, success, error, info, warning, question, other1 } =\r\n      this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Breadcrumb\r\n          routeSegments={[\r\n            { name: \"Home\", path: \"/\" },\r\n            { name: \"Extra Kits\", path: \"/extra-kits\" },\r\n            { name: \"Sweet Alert\" },\r\n          ]}\r\n        ></Breadcrumb>\r\n        <Row>\r\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\r\n            <SimpleCard title=\"Basic Alert\" className=\"h-100\">\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => this.toggleAlert(\"basic1\")}\r\n              >\r\n                Alert with title\r\n              </Button>\r\n              <SweetAlert\r\n                show={basic1}\r\n                title=\"Title\"\r\n                text=\"Here's a message!\"\r\n                onConfirm={() => this.toggleAlert(\"basic1\")}\r\n              />\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => this.toggleAlert(\"basic2\")}\r\n              >\r\n                Alert with HTML\r\n              </Button>\r\n              <SweetAlert\r\n                show={basic2}\r\n                title=\"Demo\"\r\n                html={renderToStaticMarkup(<h1>Message from html</h1>)}\r\n                onConfirm={() => this.toggleAlert(\"basic2\")}\r\n              />\r\n            </SimpleCard>\r\n          </Col>\r\n\r\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\r\n            <SimpleCard title=\"Alert Types\" className=\"h-100\">\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                variant=\"success\"\r\n                onClick={() => this.toggleAlert(\"success\")}\r\n              >\r\n                Success\r\n              </Button>\r\n              <SweetAlert\r\n                show={success}\r\n                title=\"Alert Title\"\r\n                type=\"success\"\r\n                text=\"SweetAlert in React\"\r\n                onConfirm={() => this.toggleAlert(\"success\")}\r\n              />\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                variant=\"info\"\r\n                onClick={() => this.toggleAlert(\"info\")}\r\n              >\r\n                info\r\n              </Button>\r\n              <SweetAlert\r\n                show={info}\r\n                title=\"Alert Title\"\r\n                type=\"info\"\r\n                text=\"SweetAlert in React\"\r\n                onConfirm={() => this.toggleAlert(\"info\")}\r\n              />\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                variant=\"warning\"\r\n                onClick={() => this.toggleAlert(\"warning\")}\r\n              >\r\n                warning\r\n              </Button>\r\n              <SweetAlert\r\n                show={warning}\r\n                title=\"Alert Title\"\r\n                type=\"warning\"\r\n                text=\"SweetAlert in React\"\r\n                onConfirm={() => this.toggleAlert(\"warning\")}\r\n              />\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                variant=\"danger\"\r\n                onClick={() => this.toggleAlert(\"error\")}\r\n              >\r\n                error\r\n              </Button>\r\n              <SweetAlert\r\n                show={error}\r\n                title=\"Alert Title\"\r\n                type=\"error\"\r\n                text=\"SweetAlert in React\"\r\n                onConfirm={() => this.toggleAlert(\"error\")}\r\n              />\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                variant=\"success\"\r\n                onClick={() => this.toggleAlert(\"question\")}\r\n              >\r\n                question\r\n              </Button>\r\n              <SweetAlert\r\n                show={question}\r\n                title=\"Alert Title\"\r\n                type=\"question\"\r\n                text=\"SweetAlert in React\"\r\n                onConfirm={() => this.toggleAlert(\"question\")}\r\n              />\r\n            </SimpleCard>\r\n          </Col>\r\n\r\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\r\n            <SimpleCard title=\"Other Options\" className=\"h-100\">\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => this.toggleAlert(\"other1\")}\r\n              >\r\n                Alert with Cancel\r\n              </Button>\r\n              <SweetAlert\r\n                show={other1}\r\n                title=\"Title with Cancel\"\r\n                text=\"SweetAlert in React\"\r\n                showCancelButton\r\n                onConfirm={() => {\r\n                  console.log(\"confirm\");\r\n                  this.closeAlert(\"other1\");\r\n                }}\r\n                onCancel={() => {\r\n                  console.log(\"cancel\");\r\n                  this.closeAlert(\"other1\");\r\n                }}\r\n                onClose={() => this.closeAlert(\"other1\")}\r\n              />\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => {\r\n                  swal\r\n                    .fire({\r\n                      title: \"Are you sure?\",\r\n                      text: \"You won't be able to revert this!\",\r\n                      icon: \"warning\",\r\n                      type: \"question\",\r\n                      showCancelButton: true,\r\n                      confirmButtonColor: \"#3085d6\",\r\n                      cancelButtonColor: \"#d33\",\r\n                      confirmButtonText: \"Yes, delete it!\",\r\n                      cancelButtonText: \"No\",\r\n                    })\r\n                    .then((result) => {\r\n                      if (result.value) {\r\n                        swal.fire(\r\n                          \"Deleted!\",\r\n                          \"Your file has been deleted.\",\r\n                          \"success\"\r\n                        );\r\n                      } else {\r\n                        swal.fire(\"Cancelled!\", \"Permission denied.\", \"error\");\r\n                      }\r\n                    });\r\n                }}\r\n              >\r\n                Confirm Dialog\r\n              </Button>\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => {\r\n                  swal.fire({\r\n                    title: \"Sweet!\",\r\n                    text: \"Modal with a custom image.\",\r\n                    imageUrl: \"/assets/images/photo-wide-4.jpg\",\r\n                    imageWidth: 400,\r\n                    imageHeight: 200,\r\n                    imageAlt: \"Custom image\",\r\n                  });\r\n                }}\r\n              >\r\n                Alert with Custo Image\r\n              </Button>\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => {\r\n                  let timerInterval;\r\n                  swal\r\n                    .fire({\r\n                      title: \"Auto close alert!\",\r\n                      html: \"I will close in <b></b> milliseconds.\",\r\n                      timer: 2000,\r\n                      timerProgressBar: true,\r\n                      onBeforeOpen: () => {\r\n                        swal.showLoading();\r\n                        timerInterval = setInterval(() => {\r\n                          swal.getContent().querySelector(\"b\").textContent =\r\n                            swal.getTimerLeft();\r\n                        }, 100);\r\n                      },\r\n                      onClose: () => {\r\n                        clearInterval(timerInterval);\r\n                      },\r\n                    })\r\n                    .then((result) => {\r\n                      if (\r\n                        /* Read more about handling dismissals below */\r\n                        result.dismiss === swal.DismissReason.timer\r\n                      ) {\r\n                        console.log(\"I was closed by the timer\"); // eslint-disable-line\r\n                      }\r\n                    });\r\n                }}\r\n              >\r\n                Self Closing Alert\r\n              </Button>\r\n            </SimpleCard>\r\n          </Col>\r\n\r\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\r\n            <SimpleCard title=\"Special Alerts\" className=\"h-100\">\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => {\r\n                  swal\r\n                    .fire({\r\n                      title: \"Submit your Github username\",\r\n                      input: \"text\",\r\n                      inputAttributes: {\r\n                        autocapitalize: \"off\",\r\n                      },\r\n                      showCancelButton: true,\r\n                      confirmButtonText: \"Look up\",\r\n                      showLoaderOnConfirm: true,\r\n                      preConfirm: (login) => {\r\n                        return fetch(`//api.github.com/users/${login}`)\r\n                          .then((response) => {\r\n                            if (!response.ok) {\r\n                              throw new Error(response.statusText);\r\n                            }\r\n                            return response.json();\r\n                          })\r\n                          .catch((error) => {\r\n                            swal.showValidationMessage(\r\n                              `Request failed: ${error}`\r\n                            );\r\n                          });\r\n                      },\r\n                      allowOutsideClick: () => !swal.isLoading(),\r\n                    })\r\n                    .then((result) => {\r\n                      if (result.value) {\r\n                        swal.fire({\r\n                          title: `${result.value.login}'s avatar`,\r\n                          imageUrl: result.value.avatar_url,\r\n                        });\r\n                      }\r\n                    });\r\n                }}\r\n              >\r\n                Alert with Server Request\r\n              </Button>\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => {\r\n                  swal\r\n                    .mixin({\r\n                      input: \"text\",\r\n                      confirmButtonText: \"Next &rarr;\",\r\n                      showCancelButton: true,\r\n                      progressSteps: [\"1\", \"2\", \"3\"],\r\n                    })\r\n                    .queue([\r\n                      {\r\n                        title: \"Question 1\",\r\n                        text: \"Chaining swal2 modals is easy\",\r\n                      },\r\n                      \"Question 2\",\r\n                      \"Question 3\",\r\n                    ])\r\n                    .then((result) => {\r\n                      if (result.value) {\r\n                        const answers = JSON.stringify(result.value);\r\n                        swal.fire({\r\n                          title: \"All done!\",\r\n                          html: `\r\n          Your answers:\r\n          <pre><code>${answers}</code></pre>\r\n        `,\r\n                          confirmButtonText: \"Lovely!\",\r\n                        });\r\n                      }\r\n                    });\r\n                }}\r\n              >\r\n                Alert with Stepper\r\n              </Button>\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => {\r\n                  const ipAPI = \"//api.ipify.org?format=json\";\r\n                  swal.queue([\r\n                    {\r\n                      title: \"Your public IP\",\r\n                      confirmButtonText: \"Show my public IP\",\r\n                      text:\r\n                        \"Your public IP will be received \" + \"via AJAX request\",\r\n                      showLoaderOnConfirm: true,\r\n                      preConfirm: () => {\r\n                        return fetch(ipAPI)\r\n                          .then((response) => response.json())\r\n                          .then((data) => swal.insertQueueStep(data.ip))\r\n                          .catch(() => {\r\n                            swal.insertQueueStep({\r\n                              icon: \"error\",\r\n                              title: \"Unable to get your public IP\",\r\n                            });\r\n                          });\r\n                      },\r\n                    },\r\n                  ]);\r\n                }}\r\n              >\r\n                Alert with Stepper\r\n              </Button>\r\n            </SimpleCard>\r\n          </Col>\r\n\r\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\r\n            <SimpleCard title=\"Positioning with Animation\" className=\"h-100\">\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => {\r\n                  // const ipAPI = \"//api.ipify.org?format=json\";\r\n                  swal.fire({\r\n                    title: \"Custom Position\",\r\n                    confirmButtonText: \"Ok\",\r\n                    position: \"top-end\",\r\n                    icon: \"success\",\r\n                    text:\r\n                      \"Your public IP will be received \" + \"via AJAX request\",\r\n                    footer: `<a href=\"https://daneden.github.io/animate.css/\">positions?</a>`,\r\n                  });\r\n                }}\r\n              >\r\n                Alert with Positioning\r\n              </Button>\r\n\r\n              <Button\r\n                className=\"w-100 mb-2\"\r\n                onClick={() => {\r\n                  swal.fire({\r\n                    title: \"Custom animation with Animate.css\",\r\n                    showClass: {\r\n                      popup: \"animated fadeInDown  faster\",\r\n                    },\r\n                    hideClass: {\r\n                      popup: \"animated fadeOutUp  slower\",\r\n                    },\r\n                  });\r\n                }}\r\n              >\r\n                Alert with Animation\r\n              </Button>\r\n            </SimpleCard>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppSweetAlert;\r\n"],"sourceRoot":""}