{"version":3,"sources":["app/views/app/invoice/InvoiceViewer.jsx","app/views/app/invoice/InvoiceEditor.jsx","app/views/app/invoice/InvoiceDetails.jsx","app/views/app/invoice/InvoiceService.js"],"names":["InvoiceViewer","state","subTotalCost","getInvoiceById","this","props","match","params","id","then","res","setState","data","orderNo","buyer","seller","item","invoiceItemList","status","vat","date","className","to","Button","variant","onClick","toggleInvoiceEditor","window","print","format","Date","getTime","name","address","scope","map","index","unit","price","key","Component","withRouter","InvoiceEditor","currency","loading","generateRandomId","tempId","Math","random","toString","substr","length","handleSubmit","values","setSubmitting","console","log","isNewInvoice","addInvoice","history","push","updateInvoice","calculateSubTotal","reduce","total","initialValues","validationSchema","invoiceSchema","onSubmit","enableReinitialize","errors","touched","handleChange","handleBlur","setFieldValue","isSubmitting","Form","type","disabled","FormGroup","FormLabel","FormControl","placeholder","onChange","onBlur","isInvalid","value","checked","dateFormat","selected","as","arrayHelpers","ind","remove","yup","shape","required","of","min","InvoiceDetails","showInvoiceEditor","Card","elevation","getAllInvoice","axios","get","deleteInvoice","invoice","post"],"mappings":"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","file":"static/js/121.615b35c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getInvoiceById } from \"./InvoiceService\";\r\nimport { format } from \"date-fns\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass InvoiceViewer extends Component {\r\n  state = {};\r\n  subTotalCost = 0;\r\n\r\n  componentDidMount() {\r\n    getInvoiceById(this.props.match.params.id).then((res) => {\r\n      this.setState({ ...res.data });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    this.subTotalCost = 0;\r\n    let {\r\n      orderNo,\r\n      buyer,\r\n      seller,\r\n      item: invoiceItemList = [],\r\n      status,\r\n      vat,\r\n      date,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"invoice-viewer py-16\">\r\n        <div className=\"viewer_actions px-3 mb-3 d-flex align-items-center justify-content-between\">\r\n          <Link to=\"/invoice/list\">\r\n            <i className=\"i-Left1 text-20 font-weight-700\"> </i>\r\n          </Link>\r\n          <div>\r\n            <Button\r\n              className=\"mr-3 py-2\"\r\n              variant=\"primary\"\r\n              onClick={() => this.props.toggleInvoiceEditor()}\r\n            >\r\n              Edit Invoice\r\n            </Button>\r\n            <Button\r\n              onClick={() => window.print()}\r\n              className=\"py-2\"\r\n              variant=\"warning\"\r\n            >\r\n              Print Invoice\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"print-area\" className=\"px-3\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <h4 className=\"font-weight-bold\">Order Info</h4>\r\n              <p>#{orderNo}</p>\r\n            </div>\r\n            <div className=\"col-md-6 text-sm-right\">\r\n              <p className=\"text-capitalize\">\r\n                <strong>Order status:</strong> {status}\r\n              </p>\r\n              <p>\r\n                <strong>Order date: </strong>\r\n                <span>\r\n                  {date\r\n                    ? format(new Date(date).getTime(), \"MMMM dd, yyyy\")\r\n                    : \"\"}\r\n                </span>\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-3 mb-4 border-top\"></div>\r\n          <div className=\"row mb-5\">\r\n            <div className=\"col-md-6 mb-3 mb-sm-0\">\r\n              <h5 className=\"font-weight-bold\">Bill From</h5>\r\n              <p>{seller ? seller.name : null}</p>\r\n              <span className=\"white-space-pre-line\">\r\n                {seller ? seller.address : null}\r\n              </span>\r\n            </div>\r\n            <div className=\"col-md-6 text-sm-right\">\r\n              <h5 className=\"font-weight-bold\">Bill To</h5>\r\n              <p>{buyer ? buyer.name : null}</p>\r\n              <span className=\"white-space-pre-line\">\r\n                {buyer ? buyer.address : null}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12 table-responsive\">\r\n              <table className=\"table table-hover mb-4\">\r\n                <thead className=\"bg-gray-300\">\r\n                  <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Item Name</th>\r\n                    <th scope=\"col\">Unit Price</th>\r\n                    <th scope=\"col\">Unit</th>\r\n                    <th scope=\"col\">Cost</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {invoiceItemList.map((item, index) => {\r\n                    this.subTotalCost += item.unit * item.price;\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td className=\"text-capitalize\">{index + 1}</td>\r\n                        <td className=\"text-capitalize\">{item.name}</td>\r\n                        <td className=\"text-capitalize\">{item.price}</td>\r\n                        <td className=\"text-capitalize\">{item.unit}</td>\r\n                        <td>{item.unit * item.price}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"col-md-12\">\r\n              <div className=\"invoice-summary\">\r\n                <p>\r\n                  Sub total: <span>${this.subTotalCost}</span>\r\n                </p>\r\n                <p>\r\n                  Vat(%): <span>{vat}</span>\r\n                </p>\r\n                <h5 className=\"font-weight-bold\">\r\n                  Grand Total:\r\n                  <span>\r\n                    ${(this.subTotalCost += (this.subTotalCost * vat) / 100)}\r\n                  </span>\r\n                </h5>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(InvoiceViewer);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  FormControl,\r\n  FormLabel,\r\n} from \"react-bootstrap\";\r\nimport { Formik, FieldArray } from \"formik\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { getInvoiceById, addInvoice, updateInvoice } from \"./InvoiceService\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass InvoiceEditor extends Component {\r\n  state = {\r\n    id: \"\",\r\n    orderNo: \"\",\r\n    buyer: {\r\n      name: \"\",\r\n      address: \"\",\r\n    },\r\n    seller: {\r\n      name: \"\",\r\n      address: \"\",\r\n    },\r\n    item: [],\r\n    status: \"\",\r\n    vat: \"\",\r\n    date: new Date(),\r\n    currency: \"$\",\r\n    loading: false,\r\n  };\r\n\r\n  subTotalCost = 0;\r\n\r\n  componentDidMount() {\r\n    if (!this.props.isNewInvoice)\r\n      getInvoiceById(this.props.match.params.id).then((res) => {\r\n        this.setState({ ...res.data });\r\n      });\r\n    else {\r\n      this.generateRandomId();\r\n    }\r\n  }\r\n\r\n  generateRandomId = () => {\r\n    let tempId = Math.random().toString();\r\n    let id = tempId.substr(2, tempId.length - 1);\r\n    this.setState({ id });\r\n  };\r\n\r\n  handleSubmit = (values, { setSubmitting }) => {\r\n    let { id } = this.state;\r\n    this.setState({ loading: true });\r\n    setSubmitting(true);\r\n\r\n    console.log(values);\r\n\r\n    if (this.props.isNewInvoice)\r\n      addInvoice({ id, ...values }).then(() => {\r\n        this.setState({ loading: false });\r\n        this.props.history.push(`/invoice/${id}`);\r\n        this.props.toggleInvoiceEditor();\r\n      });\r\n    else\r\n      updateInvoice(values).then(() => {\r\n        this.setState({ loading: false });\r\n        this.props.toggleInvoiceEditor();\r\n      });\r\n  };\r\n\r\n  calculateSubTotal = (values) => {\r\n    this.subTotalCost = values.item.reduce(\r\n      (total, item) => total + item.price * item.unit,\r\n      0\r\n    );\r\n  };\r\n\r\n  render() {\r\n    this.subTotalCost = 0;\r\n    let { loading } = this.state;\r\n\r\n    return (\r\n      <div className=\"invoice-viewer py-3\">\r\n        <Formik\r\n          initialValues={this.state}\r\n          validationSchema={invoiceSchema}\r\n          onSubmit={this.handleSubmit}\r\n          enableReinitialize={true}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting,\r\n            setSubmitting,\r\n            setFieldValue,\r\n          }) => {\r\n            this.calculateSubTotal(values);\r\n            return (\r\n              <Fragment>\r\n                <Form onSubmit={handleSubmit} className=\"px-3\">\r\n                  <div className=\"viewer_actions d-flex justify-content-end\">\r\n                    <div className=\"mb-4\">\r\n                      <Button\r\n                        type=\"button\"\r\n                        className=\"me-3 py-2\"\r\n                        variant=\"warning\"\r\n                        onClick={() => this.props.toggleInvoiceEditor()}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        className=\"py-2\"\r\n                        variant=\"primary\"\r\n                        disabled={loading}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row justify-content-between\">\r\n                    <div className=\"col-md-6\">\r\n                      <h4 className=\"fw-bold\">Order Info</h4>\r\n                      <FormGroup className=\"col-sm-4 mb-3 pl-0\">\r\n                        <FormLabel>Order Number</FormLabel>\r\n                        <FormControl\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          name=\"orderNo\"\r\n                          placeholder=\"Enter order number\"\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          isInvalid={errors.orderNo && touched.orderNo}\r\n                          value={values.orderNo}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"col-md-3 text-right\">\r\n                      <label className=\"d-block text-12 text-muted\">\r\n                        Order Status\r\n                      </label>\r\n                      <div className=\"pe-0 mb-4\">\r\n                        <fieldset className=\"offset-md-6\">\r\n                          <label className=\"radio radio-danger\">\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"status\"\r\n                              checked={values.status === \"pending\"}\r\n                              onChange={handleChange}\r\n                              value=\"pending\"\r\n                            />\r\n                            <span>Pending</span>\r\n                            <span className=\"checkmark\"></span>\r\n                          </label>\r\n                          <label className=\"radio check-reverse radio-warning\">\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"status\"\r\n                              checked={values.status === \"processing\"}\r\n                              onChange={handleChange}\r\n                              value=\"processing\"\r\n                            />\r\n                            <span>Processing</span>\r\n                            <span className=\"checkmark\"></span>\r\n                          </label>\r\n                          <label className=\"radio radio-success\">\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"status\"\r\n                              checked={values.status === \"delivered\"}\r\n                              onChange={handleChange}\r\n                              value=\"delivered\"\r\n                            />\r\n                            <span>Delivered</span>\r\n                            <span className=\"checkmark\"></span>\r\n                          </label>\r\n                        </fieldset>\r\n                        {errors.status && touched.status && (\r\n                          <small className=\"text-danger\">\r\n                            Minimum 1 item is required\r\n                          </small>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"form-group mb-3\">\r\n                        <div className=\"mb-1\">Order Date</div>\r\n                        <DatePicker\r\n                          className=\"form-control text-right\"\r\n                          dateFormat=\"dd/MM/yyyy\"\r\n                          selected={new Date(values.date)}\r\n                          onChange={(date) => {\r\n                            setFieldValue(\"date\", date);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"mt-3 mb-4 border-top\"></div>\r\n                  <div className=\"row mb-5\">\r\n                    <div className=\"col-md-6\">\r\n                      <h5 className=\"fw-bold\">Bill From</h5>\r\n                      <FormGroup className=\"col-md-10 mb-3 pl-0\">\r\n                        <FormControl\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          name=\"seller.name\"\r\n                          placeholder=\"Bill From\"\r\n                          value={values.seller.name}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          isInvalid={\r\n                            errors.seller &&\r\n                            errors.seller.name &&\r\n                            touched.seller &&\r\n                            touched.seller.name\r\n                          }\r\n                        />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup className=\"col-md-10 mb-3 pl-0\">\r\n                        <FormControl\r\n                          as=\"textarea\"\r\n                          placeholder=\"Bill From Address\"\r\n                          name=\"seller.address\"\r\n                          value={values.seller.address}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          isInvalid={\r\n                            errors.seller &&\r\n                            touched.seller &&\r\n                            errors.seller.address &&\r\n                            touched.seller.address\r\n                          }\r\n                        ></FormControl>\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6 text-end\">\r\n                      <h5 className=\"fw-bold\">Bill To</h5>\r\n                      <FormGroup className=\"col-md-10 offset-md-2 mb-3 pe-0\">\r\n                        <FormControl\r\n                          type=\"text\"\r\n                          className=\"text-right\"\r\n                          name=\"buyer.name\"\r\n                          placeholder=\"Bill From\"\r\n                          value={values.buyer.name}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          isInvalid={\r\n                            errors.buyer &&\r\n                            touched.buyer &&\r\n                            errors.buyer.name &&\r\n                            touched.buyer.name\r\n                          }\r\n                        />\r\n                      </FormGroup>\r\n                      <FormGroup className=\"col-md-10 offset-md-2 mb-3 pe-0\">\r\n                        <FormControl\r\n                          as=\"textarea\"\r\n                          className=\"text-right\"\r\n                          placeholder=\"Bill From Address\"\r\n                          name=\"buyer.address\"\r\n                          value={values.buyer.address}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          isInvalid={\r\n                            errors.buyer &&\r\n                            touched.buyer &&\r\n                            errors.buyer.address &&\r\n                            touched.buyer.address\r\n                          }\r\n                        ></FormControl>\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <FieldArray name=\"item\">\r\n                      {(arrayHelpers) => (\r\n                        <div className=\"col-md-12 table-responsive\">\r\n                          <table className=\"table table-hover mb-3\">\r\n                            <thead className=\"bg-gray-300\">\r\n                              <tr>\r\n                                <th scope=\"col\">#</th>\r\n                                <th scope=\"col\">Item Name</th>\r\n                                <th scope=\"col\">Unit Price</th>\r\n                                <th scope=\"col\">Unit</th>\r\n                                <th scope=\"col\">Cost</th>\r\n                                <th scope=\"col\"></th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {values.item.map((item, ind) => (\r\n                                <tr key={ind}>\r\n                                  <th className=\"text-middle\" scope=\"row\">\r\n                                    {ind + 1}\r\n                                  </th>\r\n                                  <td>\r\n                                    <FormControl\r\n                                      value={values.item[ind].name}\r\n                                      name={`item[${ind}].name`}\r\n                                      type=\"text\"\r\n                                      placeholder=\"Item Name\"\r\n                                      onChange={handleChange}\r\n                                      onBlur={handleBlur}\r\n                                      isInvalid={\r\n                                        errors.item &&\r\n                                        touched.item &&\r\n                                        errors.item[ind] &&\r\n                                        touched.item[ind] &&\r\n                                        errors.item[ind].name &&\r\n                                        touched.item[ind].name\r\n                                      }\r\n                                    />\r\n                                  </td>\r\n                                  <td>\r\n                                    <FormControl\r\n                                      value={values.item[ind].price}\r\n                                      name={`item[${ind}].price`}\r\n                                      type=\"number\"\r\n                                      placeholder=\"Unit Price\"\r\n                                      onChange={handleChange}\r\n                                      onBlur={handleBlur}\r\n                                      isInvalid={\r\n                                        errors.item &&\r\n                                        touched.item &&\r\n                                        errors.item[ind] &&\r\n                                        touched.item[ind] &&\r\n                                        errors.item[ind].price &&\r\n                                        touched.item[ind].price\r\n                                      }\r\n                                    />\r\n                                  </td>\r\n                                  <td>\r\n                                    <FormControl\r\n                                      value={values.item[ind].unit}\r\n                                      name={`item[${ind}].unit`}\r\n                                      type=\"number\"\r\n                                      placeholder=\"Unit\"\r\n                                      onChange={handleChange}\r\n                                      onBlur={handleBlur}\r\n                                      isInvalid={\r\n                                        errors.item &&\r\n                                        touched.item &&\r\n                                        errors.item[ind] &&\r\n                                        touched.item[ind] &&\r\n                                        errors.item[ind].unit &&\r\n                                        touched.item[ind].unit\r\n                                      }\r\n                                    />\r\n                                  </td>\r\n                                  <td className=\"text-middle\">\r\n                                    {values.item[ind].price *\r\n                                      values.item[ind].unit}\r\n                                  </td>\r\n                                  <td>\r\n                                    <button\r\n                                      type=\"button\"\r\n                                      onClick={() => arrayHelpers.remove(ind)}\r\n                                      className=\"btn btn-outline-secondary float-right\"\r\n                                    >\r\n                                      Delete\r\n                                    </button>\r\n                                  </td>\r\n                                </tr>\r\n                              ))}\r\n                            </tbody>\r\n                          </table>\r\n                          {values.item.length === 0 && (\r\n                            <small className=\"text-danger\">\r\n                              Minimum 1 item is required\r\n                            </small>\r\n                          )}\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() =>\r\n                              arrayHelpers.push({\r\n                                name: \"\",\r\n                                price: \"\",\r\n                                unit: \"\",\r\n                              })\r\n                            }\r\n                            className=\"btn btn-primary float-end mb-4\"\r\n                          >\r\n                            Add Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </FieldArray>\r\n\r\n                    <div className=\"col-md-12\">\r\n                      <div className=\"invoice-summary invoice-summary-input float-right\">\r\n                        <p>\r\n                          Sub total:\r\n                          <span>\r\n                            {values.currency}\r\n                            {this.subTotalCost}\r\n                          </span>\r\n                        </p>\r\n                        <p className=\"d-flex align-items-center\">\r\n                          Vat(%):\r\n                          <span>\r\n                            <FormControl\r\n                              type=\"text\"\r\n                              className=\"small-input\"\r\n                              name=\"vat\"\r\n                              value={values.vat}\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              isInvalid={errors.vat && touched.vat}\r\n                            />\r\n                            {values.currency}\r\n                            {(this.subTotalCost * values.vat) / 100}\r\n                          </span>\r\n                        </p>\r\n                        <h5 className=\"fw-bold d-flex align-items-center\">\r\n                          Grand Total:\r\n                          <span>\r\n                            <FormControl\r\n                              type=\"text\"\r\n                              className=\"small-input\"\r\n                              name=\"currency\"\r\n                              value={values.currency}\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              isInvalid={errors.currency && touched.currency}\r\n                            />\r\n                            {values.currency}\r\n                            {this.subTotalCost +\r\n                              (this.subTotalCost * values.vat) / 100}\r\n                          </span>\r\n                        </h5>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Form>\r\n              </Fragment>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst invoiceSchema = yup.object().shape({\r\n  orderNo: yup.string().required(\"orderNo is required\"),\r\n  status: yup.string().required(\"status is required\"),\r\n  seller: yup.object().shape({\r\n    name: yup.string().required(\"name is required\"),\r\n    address: yup.string().required(\"address is required\"),\r\n  }),\r\n  buyer: yup.object().shape({\r\n    name: yup.string().required(\"name is required\"),\r\n    address: yup.string().required(\"address is required\"),\r\n  }),\r\n  item: yup\r\n    .array()\r\n    .of(\r\n      yup.object().shape({\r\n        name: yup.string().required(\"name is required\"),\r\n        price: yup.number().required(\"price is required\"),\r\n        unit: yup.number().required(\"unit is required\"),\r\n      })\r\n    )\r\n    .min(1, \"Minimum 1 item is required\"),\r\n  vat: yup.number().required(\"unit is required\"),\r\n  currency: yup.string().required(\"name is required\"),\r\n});\r\n\r\nexport default withRouter(InvoiceEditor);\r\n","import React, { Component } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport InvoiceViewer from \"./InvoiceViewer\";\r\nimport InvoiceEditor from \"./InvoiceEditor\";\r\n\r\nclass InvoiceDetails extends Component {\r\n  state = {\r\n    showInvoiceEditor: false,\r\n    isNewInvoice: false\r\n  };\r\n\r\n  toggleInvoiceEditor = () => {\r\n    this.setState({\r\n      showInvoiceEditor: !this.state.showInvoiceEditor,\r\n      isNewInvoice: false\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.match.params.id === \"create\")\r\n      this.setState({ showInvoiceEditor: true, isNewInvoice: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card elevation={6} className=\"invoice-details m-sm-30\">\r\n        {this.state.showInvoiceEditor ? (\r\n          <InvoiceEditor\r\n            toggleInvoiceEditor={this.toggleInvoiceEditor}\r\n            isNewInvoice={this.state.isNewInvoice}\r\n          />\r\n        ) : (\r\n          <InvoiceViewer toggleInvoiceEditor={this.toggleInvoiceEditor} />\r\n        )}\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InvoiceDetails;\r\n","import axios from 'axios';\r\n\r\nexport const getAllInvoice = () => {\r\n    return axios.get(\"/api/invoices/all\")\r\n}\r\nexport const getInvoiceById = (id) => {\r\n    return axios.get(\"/api/invoices\", { data: id })\r\n}\r\nexport const deleteInvoice = (invoice) => {\r\n    return axios.post(\"/api/invoices/delete\", invoice)\r\n}\r\nexport const addInvoice = (invoice) => {\r\n    return axios.post(\"/api/invoices/add\", invoice)\r\n}\r\nexport const updateInvoice = (invoice) => {\r\n    return axios.post(\"/api/invoices/update\", invoice)\r\n}"],"sourceRoot":""}